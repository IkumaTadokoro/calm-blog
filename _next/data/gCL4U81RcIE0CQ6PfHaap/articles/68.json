{"pageProps":{"issue":{"body":"","bodyHTML":"","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/68/comments","created_at":"2022-08-20T03:27:58Z","events_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/68/events","html_url":"https://github.com/IkumaTadokoro/diary/issues/68","id":1345042406,"labels":[],"labels_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/68/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHWTPVs5QK7fm","number":68,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/68/reactions"},"repository_url":"https://api.github.com/repos/IkumaTadokoro/diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/68/timeline","title":"2022-08-20","updated_at":"2022-08-20T03:27:58Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/68","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},"issueComments":[{"body":"Goやっていくぞ。読めるようになるにもどういう知識が必要かわからないので、\n\nhttps://docs.google.com/presentation/d/1RVx8oeIMAWxbB7ZP2IcgZXnbZokjCmTUca-AbIpORGk/edit#slide=id.g4f417182ce_0_80\n\nこれをやっていく\n","bodyHTML":"<p>Goやっていくぞ。読めるようになるにもどういう知識が必要かわからないので、</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1RVx8oeIMAWxbB7ZP2IcgZXnbZokjCmTUca-AbIpORGk%2Fedit%23slide%3Did.g4f417182ce_0_80\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://docs.google.com/presentation/d/1RVx8oeIMAWxbB7ZP2IcgZXnbZokjCmTUca-AbIpORGk/edit#slide=id.g4f417182ce_0_80\" style=\"display: none\" rel=\"nofollow\">https://docs.google.com/presentation/d/1RVx8oeIMAWxbB7ZP2IcgZXnbZokjCmTUca-AbIpORGk/edit#slide=id.g4f417182ce_0_80</a></p>\n<p>これをやっていく</p>\n","author_association":"OWNER","created_at":"2022-08-20T03:28:39Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/68#issuecomment-1221222706","id":1221222706,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/68","node_id":"IC_kwDOHWTPVs5IymEy","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221222706/reactions"},"updated_at":"2022-08-20T03:28:39Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221222706","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},{"body":"https://docs.google.com/presentation/d/1Z5b5fIA5vqVII7YoIc4IesKuPWNtcU00cWgW08gfdjg/edit#slide=id.g4f6f42e26c_0_1\n\n次は基本構文編\n\nhttps://docs.google.com/presentation/d/1CIMDenDLZ7NPNgzmfbCNH_W3dYjaTEBdUYfUuXXuMHk/edit#slide=id.g4e29971f9a_0_0\n\nGoは静的型付け言語\n変数宣言\n\n```go\nvar n int = 100\nvar n = 100 // 型推論\nn := 100 // 関数ないのみで利用可能\nvar (\n    n = 100\n    m = 200\n)\n```\n\nint型がint, int8, int16とビット単位である。\n\n型ごとのデフォルト値「ゼロ値」が決まっている。\nお〜GoLand側で型推論できる場合は消すようにサジェスチョンが出るのか。\n\n定数宣言\n\n```go\nconst n int = 100\n```\n\nお〜文字列はシングルクォーとしか使えないんだな。\n\niota、とりあえずいい感じの連番と理解\n\nFizzBuzzやったので、次は関数\n\nhttps://docs.google.com/presentation/d/1DtWB-8FcnNb9asxSpIaOLYbAEc9OjBAwMLNxKnPA8pc/edit#slide=id.g4cbe4d134e_0_0\n\nなるほど、複数のデータ型があつまると、コンポジット型だと。スライス型ってのは面白いな。名前の意味はわかるけど今までの言語では見ていないかも。\n\nお〜配列の要素数が変更できない！いいね〜\n\n\n","bodyHTML":"<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1Z5b5fIA5vqVII7YoIc4IesKuPWNtcU00cWgW08gfdjg%2Fedit%23slide%3Did.g4f6f42e26c_0_1\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://docs.google.com/presentation/d/1Z5b5fIA5vqVII7YoIc4IesKuPWNtcU00cWgW08gfdjg/edit#slide=id.g4f6f42e26c_0_1\" style=\"display: none\" rel=\"nofollow\">https://docs.google.com/presentation/d/1Z5b5fIA5vqVII7YoIc4IesKuPWNtcU00cWgW08gfdjg/edit#slide=id.g4f6f42e26c_0_1</a></p>\n<p>次は基本構文編</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1CIMDenDLZ7NPNgzmfbCNH_W3dYjaTEBdUYfUuXXuMHk%2Fedit%23slide%3Did.g4e29971f9a_0_0\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://docs.google.com/presentation/d/1CIMDenDLZ7NPNgzmfbCNH_W3dYjaTEBdUYfUuXXuMHk/edit#slide=id.g4e29971f9a_0_0\" style=\"display: none\" rel=\"nofollow\">https://docs.google.com/presentation/d/1CIMDenDLZ7NPNgzmfbCNH_W3dYjaTEBdUYfUuXXuMHk/edit#slide=id.g4e29971f9a_0_0</a></p>\n<p>Goは静的型付け言語<br>\n変数宣言</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> n <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">// 型推論</span>\nn <span class=\"token operator\">:=</span> <span class=\"token number\">100</span> <span class=\"token comment\">// 関数ないのみで利用可能</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n    n <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n    m <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div><p>int型がint, int8, int16とビット単位である。</p>\n<p>型ごとのデフォルト値「ゼロ値」が決まっている。<br>\nお〜GoLand側で型推論できる場合は消すようにサジェスチョンが出るのか。</p>\n<p>定数宣言</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> n <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n</code></pre></div><p>お〜文字列はシングルクォーとしか使えないんだな。</p>\n<p>iota、とりあえずいい感じの連番と理解</p>\n<p>FizzBuzzやったので、次は関数</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1DtWB-8FcnNb9asxSpIaOLYbAEc9OjBAwMLNxKnPA8pc%2Fedit%23slide%3Did.g4cbe4d134e_0_0\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://docs.google.com/presentation/d/1DtWB-8FcnNb9asxSpIaOLYbAEc9OjBAwMLNxKnPA8pc/edit#slide=id.g4cbe4d134e_0_0\" style=\"display: none\" rel=\"nofollow\">https://docs.google.com/presentation/d/1DtWB-8FcnNb9asxSpIaOLYbAEc9OjBAwMLNxKnPA8pc/edit#slide=id.g4cbe4d134e_0_0</a></p>\n<p>なるほど、複数のデータ型があつまると、コンポジット型だと。スライス型ってのは面白いな。名前の意味はわかるけど今までの言語では見ていないかも。</p>\n<p>お〜配列の要素数が変更できない！いいね〜</p>\n","author_association":"OWNER","created_at":"2022-08-20T06:06:19Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/68#issuecomment-1221240648","id":1221240648,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/68","node_id":"IC_kwDOHWTPVs5IyqdI","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221240648/reactions"},"updated_at":"2022-08-20T06:06:19Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221240648","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},{"body":"とりあえず「全く知らない」から、FizzBuzzできるくらいまでには進化。\n\nhttps://zenn.dev/nobonobo/articles/e0af4e8afc6c38b42ae1\n\n- golang.jpは見に行かない。\n- golangで検索するけど、正式名称はGo\n- GO???環境変数はわからなければ設定脚内\n\nとりあえずわかるのは「Goに入ってはGoに従え」は本当にそうした方がいい。Ruby→JavaScriptに比べてだいぶ経路が違う。\n書けるようになっても、ちゃんとやらないとGo本来の実力を引き出せない。なんでそう書くのかを言語仕様と照らし合わせないとダメ\n","bodyHTML":"<p>とりあえず「全く知らない」から、FizzBuzzできるくらいまでには進化。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fzenn.dev%2Fnobonobo%2Farticles%2Fe0af4e8afc6c38b42ae1\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://zenn.dev/nobonobo/articles/e0af4e8afc6c38b42ae1\" style=\"display: none\">https://zenn.dev/nobonobo/articles/e0af4e8afc6c38b42ae1</a></p>\n<ul>\n<li>golang.jpは見に行かない。</li>\n<li>golangで検索するけど、正式名称はGo</li>\n<li>GO???環境変数はわからなければ設定脚内</li>\n</ul>\n<p>とりあえずわかるのは「Goに入ってはGoに従え」は本当にそうした方がいい。Ruby→JavaScriptに比べてだいぶ経路が違う。<br>\n書けるようになっても、ちゃんとやらないとGo本来の実力を引き出せない。なんでそう書くのかを言語仕様と照らし合わせないとダメ</p>\n","author_association":"OWNER","created_at":"2022-08-20T06:11:09Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/68#issuecomment-1221241179","id":1221241179,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/68","node_id":"IC_kwDOHWTPVs5Iyqlb","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221241179/reactions"},"updated_at":"2022-08-20T06:11:09Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221241179","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},{"body":"Goのツールチェーンに対して感じる便利さはDenoに近いものがある\n","bodyHTML":"<p>Goのツールチェーンに対して感じる便利さはDenoに近いものがある</p>\n","author_association":"OWNER","created_at":"2022-08-20T06:12:59Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/68#issuecomment-1221241370","id":1221241370,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/68","node_id":"IC_kwDOHWTPVs5Iyqoa","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221241370/reactions"},"updated_at":"2022-08-20T06:12:59Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221241370","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},{"body":"https://zenn.dev/kotap15/articles/b6f6d8ce421d67\n\nA Tour of Goをやろう。\n\nhttps://go-tour-jp.appspot.com/welcome/1\n","bodyHTML":"<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fzenn.dev%2Fkotap15%2Farticles%2Fb6f6d8ce421d67\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://zenn.dev/kotap15/articles/b6f6d8ce421d67\" style=\"display: none\">https://zenn.dev/kotap15/articles/b6f6d8ce421d67</a></p>\n<p>A Tour of Goをやろう。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgo-tour-jp.appspot.com%2Fwelcome%2F1\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://go-tour-jp.appspot.com/welcome/1\" style=\"display: none\" rel=\"nofollow\">https://go-tour-jp.appspot.com/welcome/1</a></p>\n","author_association":"OWNER","created_at":"2022-08-20T06:16:43Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/68#issuecomment-1221241782","id":1221241782,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/68","node_id":"IC_kwDOHWTPVs5Iyqu2","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221241782/reactions"},"updated_at":"2022-08-20T06:16:43Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221241782","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},{"body":"```go\nimport \"fmt\"\nimport \"math\"\n\n// factored import statement: こっちが一般的\nimport (\n    \"fmt\"\n    \"math\"\n)\n```\n\n大文字だと自動的に外部パッケージに公開される。逆に小文字だと公開されない。 \n\n\n```go\nfunc add(x int, y int) int {\n    return x + y\n}\n```\n\nhttps://go.dev/blog/declaration-syntax\n\nGoの型宣言。C以外の言語では`名前: 型宣言`となることが多いが、Goでは簡潔さをめざしコロンを削除したとのこと。\n\n```go\n// 型が同じ場合は宣言を最後だけにすることができる。\nfunc add(x, y int) int {\n    return x + y\n}\n```\n\n```go\n// 複数の戻り値を返すこともできる\nfunc swap(x, y string) (string, string) {\n    return y, x\n}\n```\n\n```go\n// 戻り値に名前をつける: named return value\n// 名前をつけた戻り値の変数を使うと、return ステートメントには何も書かずに戻すことができる\nfunc split(sum int) (x, y int) {\n    x = sum * 4 / 9\n    y = sum - x\n    return\n}\n```\n\n```go\n// Variables\nvar isExpensive bool\nvar i, j int = 1, 2\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    k := 3\n    fmt.Println(k)\n}\n```\n\n```go\nvar i int = 24\n// 型変換（Type Conversions）\nvar f float64 = float64(i)\n```\n\n```go\npackage main\n\nfunc main() {\n    var i int\n    j := i // jはintとして推論される（Type Interface）\n}\n```\n\n```go\n// 定数宣言\n// 定数は`:=`で宣言できない。\nconst Pi = 3.14\n\n// 型のない数値の定数は値に応じて必要な型をとる\nconst Big = 1 << 100\n```\n\nここまででPacakages, varibales, and functionsが終了\n","bodyHTML":"<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"math\"</span>\n\n<span class=\"token comment\">// factored import statement: こっちが一般的</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"math\"</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div><p>大文字だと自動的に外部パッケージに公開される。逆に小文字だと公開されない。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> y <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgo.dev%2Fblog%2Fdeclaration-syntax\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://go.dev/blog/declaration-syntax\" style=\"display: none\" rel=\"nofollow\">https://go.dev/blog/declaration-syntax</a></p>\n<p>Goの型宣言。C以外の言語では<code>名前: 型宣言</code>となることが多いが、Goでは簡潔さをめざしコロンを削除したとのこと。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 型が同じ場合は宣言を最後だけにすることができる。</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 複数の戻り値を返すこともできる</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">,</span> x\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 戻り値に名前をつける: named return value</span>\n<span class=\"token comment\">// 名前をつけた戻り値の変数を使うと、return ステートメントには何も書かずに戻すことができる</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>sum <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> sum <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">/</span> <span class=\"token number\">9</span>\n    y <span class=\"token operator\">=</span> sum <span class=\"token operator\">-</span> x\n    <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Variables</span>\n<span class=\"token keyword\">var</span> isExpensive <span class=\"token builtin\">bool</span>\n<span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    k <span class=\"token operator\">:=</span> <span class=\"token number\">3</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">24</span>\n<span class=\"token comment\">// 型変換（Type Conversions）</span>\n<span class=\"token keyword\">var</span> f <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span>\n    j <span class=\"token operator\">:=</span> i <span class=\"token comment\">// jはintとして推論される（Type Interface）</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 定数宣言</span>\n<span class=\"token comment\">// 定数は`:=`で宣言できない。</span>\n<span class=\"token keyword\">const</span> Pi <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span>\n\n<span class=\"token comment\">// 型のない数値の定数は値に応じて必要な型をとる</span>\n<span class=\"token keyword\">const</span> Big <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span>\n</code></pre></div><p>ここまででPacakages, varibales, and functionsが終了</p>\n","author_association":"OWNER","created_at":"2022-08-20T06:56:12Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/68#issuecomment-1221246218","id":1221246218,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/68","node_id":"IC_kwDOHWTPVs5Iyr0K","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221246218/reactions"},"updated_at":"2022-08-20T06:56:12Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221246218","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},{"body":"Forループ\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sum := 0\n    // 条件部分のカッコは省略できる。中括弧を省略することはできない。\n    for i = 0; i < 10; i++ {\n        sum += i\n    }\n    fmt.Println(sum)\n}\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sum := 1\n    // 初期化処理と後処理ステートメントの記述は任意\n    fot sum < 1000 {\n        sum += sum\n    }\n    fmt.Println(sum)\n}\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    // 無限ループ\n    for {\n        fmt.Println(\"hoge\")\n    }\n}\n```\n\n```go\nimport \"fmt\"\n\n// if文も条件部分のカッコを省略することができる\nif x < 0 {\n    fmt.Println(\"minus\")\n}\n```\n\n```go\nimport \"math\"\n\n// ifステートメントの中では簡単なステートメントを書くことができる\nif v := math.Pow(x, n); v < lim {\n    return v\n}\n```\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"runtime\"\n)\n\nfunc main() {\n    fmt.Print(\"Go runs on\")\n    // breakは不要\n    switch os := runtime.GOOS; os {\n    case \"darwin\":\n        fmt.Println(\"OS X.\")\n    case \"linux\":\n        fmt.Println(\"Linux.\")\n    default:\n\tfmt.Printf(\"%s.\\n\", os)\n    }\n}\n```\n\n```go\npakage main\n\nimport \"fmt\"\n\nfunc main() {\n    // defer: deferへ渡した関数の実行s、呼び出し元の関数の終わりまで遅延させるもの\n    defer fmt.Println(\"world\")\n    fmt.Println(\"hello\")\n}\n\n// この場合、main()が呼び出し元になるので、その関数の終わり（つまり\"hello\"が表示されるまで）呼び出されることはない\n```\n\ndeferが複数ある場合には、deferされた関数はスタックされ、LIFOで呼び出される。\n\nここまででFlow Control statements: form if, else, switch and deferが完了\n","bodyHTML":"<p>Forループ</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sum <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n    <span class=\"token comment\">// 条件部分のカッコは省略できる。中括弧を省略することはできない。</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+=</span> i\n    <span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sum <span class=\"token operator\">:=</span> <span class=\"token number\">1</span>\n    <span class=\"token comment\">// 初期化処理と後処理ステートメントの記述は任意</span>\n    fot sum <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+=</span> sum\n    <span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 無限ループ</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token comment\">// if文も条件部分のカッコを省略することができる</span>\n<span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"minus\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"math\"</span>\n\n<span class=\"token comment\">// ifステートメントの中では簡単なステートメントを書くことができる</span>\n<span class=\"token keyword\">if</span> v <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Pow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">&lt;</span> lim <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> v\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"runtime\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Go runs on\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// breakは不要</span>\n    <span class=\"token keyword\">switch</span> os <span class=\"token operator\">:=</span> runtime<span class=\"token punctuation\">.</span>GOOS<span class=\"token punctuation\">;</span> os <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"darwin\"</span><span class=\"token punctuation\">:</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OS X.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"linux\"</span><span class=\"token punctuation\">:</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Linux.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s.\\n\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\">pakage main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// defer: deferへ渡した関数の実行s、呼び出し元の関数の終わりまで遅延させるもの</span>\n    <span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// この場合、main()が呼び出し元になるので、その関数の終わり（つまり\"hello\"が表示されるまで）呼び出されることはない</span>\n</code></pre></div><p>deferが複数ある場合には、deferされた関数はスタックされ、LIFOで呼び出される。</p>\n<p>ここまででFlow Control statements: form if, else, switch and deferが完了</p>\n","author_association":"OWNER","created_at":"2022-08-20T07:41:12Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/68#issuecomment-1221251715","id":1221251715,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/68","node_id":"IC_kwDOHWTPVs5IytKD","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221251715/reactions"},"updated_at":"2022-08-20T07:41:12Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221251715","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},{"body":"ここからPointerか。今日中には終わらせるけど、じっくりやっていくぞ。\n\n> Goはポインタを扱います。ポインタは値のメモリアドレスを指します。\n\nなんとなくわかるけど、なんのために使うのかわかっていない。\n\n変数`T`のポインタは、`*T`型で、ゼロ値は`nil`である。あれ、そういや`null`じゃなくて`nil`なんだな。\n\n```go\nvar p *int\n```\n\n`&`オペレータでそのオペランドへのポインタを引き出す。\n\n```go\ni := 42\np = &i\n```\n\n`*`オペレータは、ポインタの指す先の変数を示す。\n\n```go\ni := 42\np = &i\nfmt.Println(*p)\n```\n\nこれを\"dereferencing\"または\"indirecting\"と呼ぶそうな。確かにそんな感じはする。\n\n```go\n// 構造体\ntype Hoge struct {\n    X int\n    Y int\n}\n\nfunc main() {\n    hoge := Hoge{1, 2}\n    fmt.Println(hoge.X)\n    hoge.X = 4\n    fmt.Println(hoge.X)\n}\n```\n\n```go\ntype Vertex struct {\n    X, Y int \n} \n\nvar (\n    v1 = Vertex{X: 1} // これがName構文で、フィールドの一部だけを指定することができる\n)\n```\n\n[n]T型は、型Tのn個の変数の配列を表す。\n\n```go\nvar array [2]string // 要素数2この配列\n```\n\n配列の要素数を変えることはできない。配列は固定長だが、スライスは可変長。型[]Tは型Tのスライス\n\n```go\nvar slice []int // int型のスライス\nprimes := [4]int{2, 3, 5, 7}\ns = primes[0:2]\n```\n\nスライスはスライスという独自なものではなくて、配列の部分列。スライスの要素を変更すると、元となる配列が変更される。\nスライスはコロンで区切られたインデックスによって元の配列の部分を指定する。半開区間なので、上限の方は含まない。\n\nスライスする時の下限と上限をそれぞれ省略した場合には、デフォルトの値が採用される。下限は配列の最初で、上限は配列の最後。\n\nスライスには長さと容量の2つの属性がある。長さはスライス自体の長さで、容量はスライスの最初の要素から数えて元となる配列の要素数\n\nスライスのゼロ値はnil。\n\n組み込みの`make`関数を使ってスライスを作成する。\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    // ゼロ化された配列を割り当て、その配列を指すスライスを返す\n    a := make([]int, 5)\n\n    // ゼロ化された配列を割り当て、その配列かつ指定した容量のスライスを返す\n    b := make([]int, 0, 5)\n}\n```\n\nrangeはforループに利用し、スライスやマップを一つずつ反復処理するために使用する。\n\n```go\nimport \"fmt\"\n\nvar pow = []int{1, 2, 4, 8, 16, 32, 64, 128}\n\nfunc main() {\n    // indexとvalueを返している\n    for i, v := range pow {\n        fmt.Printf(\"3**%d = %d\\n\", i, v)\n    }\n}\n```\n\n必要ない値は`_`で捨てることができる。\n\n\nとりあえずBasicまでは終わった...。\n","bodyHTML":"<p>ここからPointerか。今日中には終わらせるけど、じっくりやっていくぞ。</p>\n<blockquote>\n<p>Goはポインタを扱います。ポインタは値のメモリアドレスを指します。</p>\n</blockquote>\n<p>なんとなくわかるけど、なんのために使うのかわかっていない。</p>\n<p>変数<code>T</code>のポインタは、<code>*T</code>型で、ゼロ値は<code>nil</code>である。あれ、そういや<code>null</code>じゃなくて<code>nil</code>なんだな。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">*</span><span class=\"token builtin\">int</span>\n</code></pre></div><p><code>&amp;</code>オペレータでそのオペランドへのポインタを引き出す。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\">i <span class=\"token operator\">:=</span> <span class=\"token number\">42</span>\np <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i\n</code></pre></div><p><code>*</code>オペレータは、ポインタの指す先の変数を示す。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\">i <span class=\"token operator\">:=</span> <span class=\"token number\">42</span>\np <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span>\n</code></pre></div><p>これを&quot;dereferencing&quot;または&quot;indirecting&quot;と呼ぶそうな。確かにそんな感じはする。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 構造体</span>\n<span class=\"token keyword\">type</span> Hoge <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    X <span class=\"token builtin\">int</span>\n    Y <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    hoge <span class=\"token operator\">:=</span> Hoge<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>hoge<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">)</span>\n    hoge<span class=\"token punctuation\">.</span>X <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>hoge<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Vertex <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    X<span class=\"token punctuation\">,</span> Y <span class=\"token builtin\">int</span> \n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n    v1 <span class=\"token operator\">=</span> Vertex<span class=\"token punctuation\">{</span>X<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// これがName構文で、フィールドの一部だけを指定することができる</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div><p>[n]T型は、型Tのn個の変数の配列を表す。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> array <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token comment\">// 要素数2この配列</span>\n</code></pre></div><p>配列の要素数を変えることはできない。配列は固定長だが、スライスは可変長。型[]Tは型Tのスライス</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> slice <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token comment\">// int型のスライス</span>\nprimes <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">}</span>\ns <span class=\"token operator\">=</span> primes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n</code></pre></div><p>スライスはスライスという独自なものではなくて、配列の部分列。スライスの要素を変更すると、元となる配列が変更される。<br>\nスライスはコロンで区切られたインデックスによって元の配列の部分を指定する。半開区間なので、上限の方は含まない。</p>\n<p>スライスする時の下限と上限をそれぞれ省略した場合には、デフォルトの値が採用される。下限は配列の最初で、上限は配列の最後。</p>\n<p>スライスには長さと容量の2つの属性がある。長さはスライス自体の長さで、容量はスライスの最初の要素から数えて元となる配列の要素数</p>\n<p>スライスのゼロ値はnil。</p>\n<p>組み込みの<code>make</code>関数を使ってスライスを作成する。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ゼロ化された配列を割り当て、その配列を指すスライスを返す</span>\n    a <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// ゼロ化された配列を割り当て、その配列かつ指定した容量のスライスを返す</span>\n    b <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>rangeはforループに利用し、スライスやマップを一つずつ反復処理するために使用する。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">var</span> pow <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// indexとvalueを返している</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> pow <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3**%d = %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>必要ない値は<code>_</code>で捨てることができる。</p>\n<p>とりあえずBasicまでは終わった...。</p>\n","author_association":"OWNER","created_at":"2022-08-20T13:17:46Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/68#issuecomment-1221313509","id":1221313509,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/68","node_id":"IC_kwDOHWTPVs5Iy8Pl","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221313509/reactions"},"updated_at":"2022-08-20T13:17:46Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221313509","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}}]},"__N_SSG":true}