{"pageProps":{"issue":{"body":"","bodyHTML":"","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69/comments","created_at":"2022-08-20T23:15:51Z","events_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69/events","html_url":"https://github.com/IkumaTadokoro/diary/issues/69","id":1345328710,"labels":[],"labels_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHWTPVs5QMBZG","number":69,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69/reactions"},"repository_url":"https://api.github.com/repos/IkumaTadokoro/diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69/timeline","title":"2022-08-21","updated_at":"2022-08-20T23:15:51Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},"issueComments":[{"body":"pdlgenの挙動をみていく。\n\nまずは動かしてみて、どういうふうに動くかを確認する。\n\nREADMEをちゃんと読んでおこう。いそがば回れだ。\n\n- cdproto-genはChrome DevTools Protocolのコマンド、イベント、型のためのGoコードを生成する。\n- cdproto-genはChromiumソースツリーから`browser_protocol.pdl`と`js_protocol.pdl`を取得する。これらは`$GOPATH/pkg/cdproto-gen`にキャッシュされ、定期的に更新される。\n- HAR定義は特別なHARドメインを生成するために使用される。\n  - HAR定義ってなんだ？\n　- http://www.softwareishard.com/blog/har-12-spec/ のことみたい\n  - HTTP ARchive 1.2のことだそう。\n  - Webブラウザーとサイトとのやりとりに関する詳細なパフォーマンスデータをエクスポートするためのHTTPトランザクションのアーカイブ形式を定義する仕様\n- cdproto-gen は browser_protocol.pdl と js_protocol.pdl で定義された CDP ドメインをテンプレートから構成して動作するように調整する。\n  - 生成物はchromedp/cdprotoとchromedp/cdproto/<domain>サブパッケージ。循環依存性を持つCDPタイプは`chromedp/cdproto/cdp`パッケージに配置される。\n\n全体構成がほんのりわかったくらい。動かしてみよう\n\n```bash\ngo get -u github.com/chromedp/cdproto-gen\n```\n\nいまって`go get`使うんだっけ?あ〜少なくとも1.17の時点で非推奨になっているので、1.19を使っている自分としては`go install`を使うべき。\n\nhttps://future-architect.github.io/articles/20210818a/\n\nhttps://re-engines.com/2021/10/11/go-1-16%E3%81%A7%E3%81%AEgo-get%E3%81%A8go-install%E3%81%AE%E5%A4%89%E6%9B%B4%E7%82%B9/\n\n`go get`は`go.mod`を編集するためのコマンド、`go install`はバイナリのビルド、インストールのためのコマンドになったと。\n\n\n`-u`オプションはなんだ？\n\nhttps://qiita.com/tadaken/items/9f8fd9c8e7096b6bffde\n\n> 新しいマイナーリリースまたはパッチリリースが利用可能な場合に、パッケージとその依存パッケージをネットワークから更新する。\n\nなるほど、最新版を取ってくる感じにすればいいのか。Goの公式サイト行って、go installを確認するか。\n\nGoのドキュメント、検索機能ついてないの辛すぎないですか？\n\nhttps://go.dev/doc/cmd\n\nこれがコマンドのドキュメントっぽい。`go install <package>@<version>`\n\n割と最近まで更新されているのに、何で`go get`がREADMEに残っているんだろう。全然Issueにも上がっていない。つまり、これはgo getでやれってことなのかな？\n\nとりあえずやってみよう。\n\n```bash\ngo get -u github.com/chromedp/cdproto-gen\n```\n\n```bash\ngo: go.mod file not found in current directory or any parent directory.\n\t'go get' is no longer supported outside a module.\n\tTo build and install a command, use 'go install' with a version,\n\tlike 'go install example.com/cmd@latest'\n\tFor more information, see https://golang.org/doc/go-get-install-deprecation\n\tor run 'go help get' or 'go help install'.\n```\n\nダメじゃん。というかヘルプコマンドナいと思ったら、helpの引数にコマンドを渡す形式だったんか。go installしてみる。\n\n\n```bash\n$ go install github.com/chromedp/cdproto-gen\n\ngo install github.com/chromedp/cdproto-gen\ngo: 'go install' requires a version when current directory is not in a module\n\tTry 'go install github.com/chromedp/cdproto-gen@latest' to install the latest version\n\n$ go install github.com/chromedp/cdproto-gen@latest\n\ngo: downloading github.com/chromedp/cdproto-gen v0.0.0-20200709115207-99c9ca13bbae\ngo: downloading github.com/mailru/easyjson v0.7.2-0.20200524104011-8ba3c7bdceed\ngo: downloading github.com/ryanuber/go-glob v1.0.0\ngo: downloading golang.org/x/sync v0.0.0-20200317015054-43a5402ce75a\ngo: downloading golang.org/x/tools v0.0.0-20200606014950-c42cb6316fb6\ngo: downloading github.com/valyala/quicktemplate v1.5.0\ngo: downloading github.com/client9/misspell v0.3.4\ngo: downloading github.com/knq/snaker v0.0.0-20181215144011-2bc8a4db4687\ngo: downloading github.com/Masterminds/semver v1.5.0\ngo: downloading github.com/PuerkitoBio/goquery v1.5.1\ngo: downloading golang.org/x/net v0.0.0-20200602114024-627f9648deb9\ngo: downloading github.com/andybalholm/cascadia v1.2.0\ngo: downloading github.com/valyala/bytebufferpool v1.0.0\ngo: downloading golang.org/x/mod v0.2.0\ngo: downloading golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543\n```\n\nこれでダウンロード完了した。みたい。次にREADMEのUsingのセクション。\n\n`cdproto-gen`で動くそうな。これも動かしてみるか。\n\n```bash\n$ cdproto-gen\nzsh: command not found: cdproto-gen\n```\n\nまあPATHが通ってないんでしょうね。一旦Goのファイルがどこに落ちているのか調べる。\n\nhttps://pkg.go.dev/cmd/go#hdr-Compile_and_install_packages_and_dependencies\n\n> Executables are installed in the directory named by the GOBIN environment variable, which defaults to $GOPATH/bin or $HOME/go/bin if the GOPATH environment variable is not set. Executables in $GOROOT are installed in $GOROOT/bin or $GOTOOLDIR instead of $GOBIN.\n\n```bash\n$ echo $GOROOT $GOBIN $GOPATH\n\n\n$ ls ~/go/bin\ncdproto-gen\n```\n\nなるほど、ここにあるけどPATHが通ってないので、ということなのか。これGOPATHとか設定した方がいいのかな？もう少し公式ドキュメントを読み進める。\n\n`go install`自体のドキュメントにはなさそうなので、環境年数のドキュメントに飛びたい。\n\nhttps://pkg.go.dev/cmd/go#hdr-GOPATH_environment_variable\n\nhttps://pkg.go.dev/cmd/go#hdr-GOPATH_and_Modules\n\nhttps://pkg.go.dev/cmd/go#hdr-Legacy_GOPATH_go_get\n\nOverviewをみる限りだとここら辺かな？\n\n```bash\n$ go env GOPATH\n~/go\n```\n\nインストール先と挙動はあっていそうなので単純にGOPATHへのPATHを通せば良さそう。\n\n```bash\n# .zshrc\nexport GOPATH=$HOME/go\nexport GOBIN=$GOPATH/bin\nexport PATH=$PATH:$GOBIN\n```\n\n```bash\ncdproto-gen --help\nUsage of cdproto-gen:\n  -cache string\n    \tprotocol cache directory\n  -chromium string\n    \tchromium protocol version\n  -debug\n    \ttoggle debug (writes generated files to disk without post-processing)\n  -go-pkg string\n    \tgo base package name (default \"github.com/chromedp/cdproto\")\n  -go-wl string\n    \tcomma-separated list of files to whitelist (ignore) (default \"LICENSE,README.md,*.pdl,go.mod,go.sum,easyjson.go\")\n  -latest\n    \tuse latest protocol\n  -no-clean\n    \ttoggle not cleaning (removing) existing directories\n  -no-dump\n    \ttoggle not dumping generated protocol file to out directory\n  -out string\n    \tpackage out directory\n  -pdl string\n    \tpath to pdl file to use\n  -ttl duration\n    \tfile retrieval caching ttl (default 24h0m0s)\n  -v8 string\n    \tv8 protocol version\n```\n\n認識されたようだ。一旦休憩\n","bodyHTML":"<p>pdlgenの挙動をみていく。</p>\n<p>まずは動かしてみて、どういうふうに動くかを確認する。</p>\n<p>READMEをちゃんと読んでおこう。いそがば回れだ。</p>\n<ul>\n<li>cdproto-genはChrome DevTools Protocolのコマンド、イベント、型のためのGoコードを生成する。</li>\n<li>cdproto-genはChromiumソースツリーから<code>browser_protocol.pdl</code>と<code>js_protocol.pdl</code>を取得する。これらは<code>$GOPATH/pkg/cdproto-gen</code>にキャッシュされ、定期的に更新される。</li>\n<li>HAR定義は特別なHARドメインを生成するために使用される。\n<ul>\n<li>HAR定義ってなんだ？<br>\n　- <a href=\"http://www.softwareishard.com/blog/har-12-spec/\" rel=\"nofollow\">http://www.softwareishard.com/blog/har-12-spec/</a> のことみたい</li>\n<li>HTTP ARchive 1.2のことだそう。</li>\n<li>Webブラウザーとサイトとのやりとりに関する詳細なパフォーマンスデータをエクスポートするためのHTTPトランザクションのアーカイブ形式を定義する仕様</li>\n</ul>\n</li>\n<li>cdproto-gen は browser_protocol.pdl と js_protocol.pdl で定義された CDP ドメインをテンプレートから構成して動作するように調整する。\n<ul>\n<li>生成物はchromedp/cdprotoとchromedp/cdproto/&lt;domain&gt;サブパッケージ。循環依存性を持つCDPタイプは<code>chromedp/cdproto/cdp</code>パッケージに配置される。</li>\n</ul>\n</li>\n</ul>\n<p>全体構成がほんのりわかったくらい。動かしてみよう</p>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">go get -u github.com/chromedp/cdproto-gen\n</code></pre></div><p>いまって<code>go get</code>使うんだっけ?あ〜少なくとも1.17の時点で非推奨になっているので、1.19を使っている自分としては<code>go install</code>を使うべき。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Ffuture-architect.github.io%2Farticles%2F20210818a%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://future-architect.github.io/articles/20210818a/\" style=\"display: none\" rel=\"nofollow\">https://future-architect.github.io/articles/20210818a/</a></p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fre-engines.com%2F2021%2F10%2F11%2Fgo-1-16%25E3%2581%25A7%25E3%2581%25AEgo-get%25E3%2581%25A8go-install%25E3%2581%25AE%25E5%25A4%2589%25E6%259B%25B4%25E7%2582%25B9%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://re-engines.com/2021/10/11/go-1-16%E3%81%A7%E3%81%AEgo-get%E3%81%A8go-install%E3%81%AE%E5%A4%89%E6%9B%B4%E7%82%B9/\" style=\"display: none\" rel=\"nofollow\">https://re-engines.com/2021/10/11/go-1-16でのgo-getとgo-installの変更点/</a></p>\n<p><code>go get</code>は<code>go.mod</code>を編集するためのコマンド、<code>go install</code>はバイナリのビルド、インストールのためのコマンドになったと。</p>\n<p><code>-u</code>オプションはなんだ？</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fqiita.com%2Ftadaken%2Fitems%2F9f8fd9c8e7096b6bffde\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://qiita.com/tadaken/items/9f8fd9c8e7096b6bffde\" style=\"display: none\" rel=\"nofollow\">https://qiita.com/tadaken/items/9f8fd9c8e7096b6bffde</a></p>\n<blockquote>\n<p>新しいマイナーリリースまたはパッチリリースが利用可能な場合に、パッケージとその依存パッケージをネットワークから更新する。</p>\n</blockquote>\n<p>なるほど、最新版を取ってくる感じにすればいいのか。Goの公式サイト行って、go installを確認するか。</p>\n<p>Goのドキュメント、検索機能ついてないの辛すぎないですか？</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgo.dev%2Fdoc%2Fcmd\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://go.dev/doc/cmd\" style=\"display: none\" rel=\"nofollow\">https://go.dev/doc/cmd</a></p>\n<p>これがコマンドのドキュメントっぽい。<code>go install &lt;package&gt;@&lt;version&gt;</code></p>\n<p>割と最近まで更新されているのに、何で<code>go get</code>がREADMEに残っているんだろう。全然Issueにも上がっていない。つまり、これはgo getでやれってことなのかな？</p>\n<p>とりあえずやってみよう。</p>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">go get -u github.com/chromedp/cdproto-gen\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">go: go.mod <span class=\"token function\">file</span> not found <span class=\"token keyword\">in</span> current directory or any parent directory.\n\t<span class=\"token string\">'go get'</span> is no longer supported outside a module.\n\tTo build and <span class=\"token function\">install</span> a command, use <span class=\"token string\">'go install'</span> with a version,\n\tlike <span class=\"token string\">'go install example.com/cmd@latest'</span>\n\tFor <span class=\"token function\">more</span> information, see https://golang.org/doc/go-get-install-deprecation\n\tor run <span class=\"token string\">'go help get'</span> or <span class=\"token string\">'go help install'</span><span class=\"token builtin class-name\">.</span>\n</code></pre></div><p>ダメじゃん。というかヘルプコマンドナいと思ったら、helpの引数にコマンドを渡す形式だったんか。go installしてみる。</p>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">$ go <span class=\"token function\">install</span> github.com/chromedp/cdproto-gen\n\ngo <span class=\"token function\">install</span> github.com/chromedp/cdproto-gen\ngo: <span class=\"token string\">'go install'</span> requires a version when current directory is not <span class=\"token keyword\">in</span> a module\n\tTry <span class=\"token string\">'go install github.com/chromedp/cdproto-gen@latest'</span> to <span class=\"token function\">install</span> the latest version\n\n$ go <span class=\"token function\">install</span> github.com/chromedp/cdproto-gen@latest\n\ngo: downloading github.com/chromedp/cdproto-gen v0.0.0-20200709115207-99c9ca13bbae\ngo: downloading github.com/mailru/easyjson v0.7.2-0.20200524104011-8ba3c7bdceed\ngo: downloading github.com/ryanuber/go-glob v1.0.0\ngo: downloading golang.org/x/sync v0.0.0-20200317015054-43a5402ce75a\ngo: downloading golang.org/x/tools v0.0.0-20200606014950-c42cb6316fb6\ngo: downloading github.com/valyala/quicktemplate v1.5.0\ngo: downloading github.com/client9/misspell v0.3.4\ngo: downloading github.com/knq/snaker v0.0.0-20181215144011-2bc8a4db4687\ngo: downloading github.com/Masterminds/semver v1.5.0\ngo: downloading github.com/PuerkitoBio/goquery v1.5.1\ngo: downloading golang.org/x/net v0.0.0-20200602114024-627f9648deb9\ngo: downloading github.com/andybalholm/cascadia v1.2.0\ngo: downloading github.com/valyala/bytebufferpool v1.0.0\ngo: downloading golang.org/x/mod v0.2.0\ngo: downloading golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543\n</code></pre></div><p>これでダウンロード完了した。みたい。次にREADMEのUsingのセクション。</p>\n<p><code>cdproto-gen</code>で動くそうな。これも動かしてみるか。</p>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">$ cdproto-gen\nzsh: <span class=\"token builtin class-name\">command</span> not found: cdproto-gen\n</code></pre></div><p>まあPATHが通ってないんでしょうね。一旦Goのファイルがどこに落ちているのか調べる。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fpkg.go.dev%2Fcmd%2Fgo%23hdr-Compile_and_install_packages_and_dependencies\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://pkg.go.dev/cmd/go#hdr-Compile_and_install_packages_and_dependencies\" style=\"display: none\" rel=\"nofollow\">https://pkg.go.dev/cmd/go#hdr-Compile_and_install_packages_and_dependencies</a></p>\n<blockquote>\n<p>Executables are installed in the directory named by the GOBIN environment variable, which defaults to $GOPATH/bin or $HOME/go/bin if the GOPATH environment variable is not set. Executables in $GOROOT are installed in $GOROOT/bin or $GOTOOLDIR instead of $GOBIN.</p>\n</blockquote>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$GOROOT</span> <span class=\"token variable\">$GOBIN</span> <span class=\"token variable\">$GOPATH</span>\n\n\n$ <span class=\"token function\">ls</span> ~/go/bin\ncdproto-gen\n</code></pre></div><p>なるほど、ここにあるけどPATHが通ってないので、ということなのか。これGOPATHとか設定した方がいいのかな？もう少し公式ドキュメントを読み進める。</p>\n<p><code>go install</code>自体のドキュメントにはなさそうなので、環境年数のドキュメントに飛びたい。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fpkg.go.dev%2Fcmd%2Fgo%23hdr-GOPATH_environment_variable\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://pkg.go.dev/cmd/go#hdr-GOPATH_environment_variable\" style=\"display: none\" rel=\"nofollow\">https://pkg.go.dev/cmd/go#hdr-GOPATH_environment_variable</a></p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fpkg.go.dev%2Fcmd%2Fgo%23hdr-GOPATH_and_Modules\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://pkg.go.dev/cmd/go#hdr-GOPATH_and_Modules\" style=\"display: none\" rel=\"nofollow\">https://pkg.go.dev/cmd/go#hdr-GOPATH_and_Modules</a></p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fpkg.go.dev%2Fcmd%2Fgo%23hdr-Legacy_GOPATH_go_get\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://pkg.go.dev/cmd/go#hdr-Legacy_GOPATH_go_get\" style=\"display: none\" rel=\"nofollow\">https://pkg.go.dev/cmd/go#hdr-Legacy_GOPATH_go_get</a></p>\n<p>Overviewをみる限りだとここら辺かな？</p>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">$ go <span class=\"token function\">env</span> GOPATH\n~/go\n</code></pre></div><p>インストール先と挙動はあっていそうなので単純にGOPATHへのPATHを通せば良さそう。</p>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># .zshrc</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">GOPATH</span><span class=\"token operator\">=</span><span class=\"token environment constant\">$HOME</span>/go\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">GOBIN</span><span class=\"token operator\">=</span><span class=\"token variable\">$GOPATH</span>/bin\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$GOBIN</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">cdproto-gen --help\nUsage of cdproto-gen:\n  -cache string\n    \tprotocol cache directory\n  -chromium string\n    \tchromium protocol version\n  -debug\n    \ttoggle debug <span class=\"token punctuation\">(</span>writes generated files to disk without post-processing<span class=\"token punctuation\">)</span>\n  -go-pkg string\n    \tgo base package name <span class=\"token punctuation\">(</span>default <span class=\"token string\">\"github.com/chromedp/cdproto\"</span><span class=\"token punctuation\">)</span>\n  -go-wl string\n    \tcomma-separated list of files to whitelist <span class=\"token punctuation\">(</span>ignore<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>default <span class=\"token string\">\"LICENSE,README.md,*.pdl,go.mod,go.sum,easyjson.go\"</span><span class=\"token punctuation\">)</span>\n  -latest\n    \tuse latest protocol\n  -no-clean\n    \ttoggle not cleaning <span class=\"token punctuation\">(</span>removing<span class=\"token punctuation\">)</span> existing directories\n  -no-dump\n    \ttoggle not dumping generated protocol <span class=\"token function\">file</span> to out directory\n  -out string\n    \tpackage out directory\n  -pdl string\n    \tpath to pdl <span class=\"token function\">file</span> to use\n  -ttl duration\n    \t<span class=\"token function\">file</span> retrieval caching ttl <span class=\"token punctuation\">(</span>default 24h0m0s<span class=\"token punctuation\">)</span>\n  -v8 string\n    \tv8 protocol version\n</code></pre></div><p>認識されたようだ。一旦休憩</p>\n","author_association":"OWNER","created_at":"2022-08-21T06:39:27Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/69#issuecomment-1221479502","id":1221479502,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69","node_id":"IC_kwDOHWTPVs5IzkxO","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221479502/reactions"},"updated_at":"2022-08-21T06:39:27Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221479502","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},{"body":"では実際に動かして、何をしているのかみてみるところから再開。\n\n```bash\n$ cdproto-gen\n\n# 一部だけ抜粋\npanic: could not resolve type cdp.compatibilitymode in domain cdp\n```\n\nなんかとりあえずpanicになってそう笑\n\nコマンドの実行履歴的に、`~/Library/Caches/cdproto-gen`あたりに何かを生成していそうなのでみてみる。\n\n```bash\nLibrary/Caches/cdproto-gen\n❯ la\ntotal 0\ndrwxr-xr-x    6 ikuma  staff   192  8 21 16:02 .\ndrwx------+ 129 ikuma  staff  4128  8 21 16:02 ..\ndrwxr-xr-x    3 ikuma  staff    96  8 21 16:02 deps\ndrwxr-xr-x    3 ikuma  staff    96  8 21 16:02 html\ndrwxr-xr-x    5 ikuma  staff   160  8 21 16:02 pdl\ndrwxr-xr-x    3 ikuma  staff    96  8 21 16:02 refs\n```\n\nお〜！できてる。\n\n無難にhtmlから開いてみるか。\n\n内容はREADMEにあるとおり、以下のサイトのものっぽい。\n\nhttps://chromium.googlesource.com/chromium/src.git\n\nこのサイト自体は、gitliesというツールで作られているようです。\n\nhttps://gerrit.googlesource.com/gitiles/\n\nそのほかもみてみるか。次にpdl。\n\nchromium/107.0.5252.1.pdl と同じように、combinedとv8のpdlが格納されている。\n\nここまでの動作から、grab.goでこの取得処理をしていることがわかる。\n\nhttps://github.com/chromedp/pdlgen/blob/73b2ad0f16066348aa47151b49d11ec51c7e531a/grab.go\n\nたぶん情報の取得処理自体は完了していて、そこから何か仕様にもなにかがよくなくてエラーになっている。エラーメッセージに戻る。\n\nPanic自体はGoにおける例外処理的な仕組みなのかな？\n\nhttps://moneyforward.com/engineers_blog/2020/09/09/goroutine-panic-handling/\n\n公式読まないでごめんだけど、雰囲気掴むために日本語ブログ読む。\n\n> panicは、コールされるとプログラムが終了するビルトイン関数の事です。\n\nなるほど。で、実際にpanicを呼び出しているのはここだ。\n\nhttps://github.com/chromedp/pdlgen/blob/5017836d2c839513555503c7fbbd884daafdf467/gen/gotpl/util.go#L143\n\n大元はここ\n\nhttps://github.com/chromedp/pdlgen/blob/99c9ca13bbaef6b33dec6d46e232ce22367fc1a7/main.go#L233\n\nめちゃくちゃ一つの関数長いじゃんか...。でも読まなきゃわからんので読む。\n","bodyHTML":"<p>では実際に動かして、何をしているのかみてみるところから再開。</p>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">$ cdproto-gen\n\n<span class=\"token comment\"># 一部だけ抜粋</span>\npanic: could not resolve <span class=\"token builtin class-name\">type</span> cdp.compatibilitymode <span class=\"token keyword\">in</span> domain cdp\n</code></pre></div><p>なんかとりあえずpanicになってそう笑</p>\n<p>コマンドの実行履歴的に、<code>~/Library/Caches/cdproto-gen</code>あたりに何かを生成していそうなのでみてみる。</p>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">Library/Caches/cdproto-gen\n❯ la\ntotal <span class=\"token number\">0</span>\ndrwxr-xr-x    <span class=\"token number\">6</span> ikuma  staff   <span class=\"token number\">192</span>  <span class=\"token number\">8</span> <span class=\"token number\">21</span> <span class=\"token number\">16</span>:02 <span class=\"token builtin class-name\">.</span>\ndrwx------+ <span class=\"token number\">129</span> ikuma  staff  <span class=\"token number\">4128</span>  <span class=\"token number\">8</span> <span class=\"token number\">21</span> <span class=\"token number\">16</span>:02 <span class=\"token punctuation\">..</span>\ndrwxr-xr-x    <span class=\"token number\">3</span> ikuma  staff    <span class=\"token number\">96</span>  <span class=\"token number\">8</span> <span class=\"token number\">21</span> <span class=\"token number\">16</span>:02 deps\ndrwxr-xr-x    <span class=\"token number\">3</span> ikuma  staff    <span class=\"token number\">96</span>  <span class=\"token number\">8</span> <span class=\"token number\">21</span> <span class=\"token number\">16</span>:02 html\ndrwxr-xr-x    <span class=\"token number\">5</span> ikuma  staff   <span class=\"token number\">160</span>  <span class=\"token number\">8</span> <span class=\"token number\">21</span> <span class=\"token number\">16</span>:02 pdl\ndrwxr-xr-x    <span class=\"token number\">3</span> ikuma  staff    <span class=\"token number\">96</span>  <span class=\"token number\">8</span> <span class=\"token number\">21</span> <span class=\"token number\">16</span>:02 refs\n</code></pre></div><p>お〜！できてる。</p>\n<p>無難にhtmlから開いてみるか。</p>\n<p>内容はREADMEにあるとおり、以下のサイトのものっぽい。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fchromium.googlesource.com%2Fchromium%2Fsrc.git\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://chromium.googlesource.com/chromium/src.git\" style=\"display: none\" rel=\"nofollow\">https://chromium.googlesource.com/chromium/src.git</a></p>\n<p>このサイト自体は、gitliesというツールで作られているようです。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgerrit.googlesource.com%2Fgitiles%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://gerrit.googlesource.com/gitiles/\" style=\"display: none\" rel=\"nofollow\">https://gerrit.googlesource.com/gitiles/</a></p>\n<p>そのほかもみてみるか。次にpdl。</p>\n<p>chromium/107.0.5252.1.pdl と同じように、combinedとv8のpdlが格納されている。</p>\n<p>ここまでの動作から、grab.goでこの取得処理をしていることがわかる。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Fchromedp%2Fpdlgen%2Fblob%2F73b2ad0f16066348aa47151b49d11ec51c7e531a%2Fgrab.go\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/chromedp/pdlgen/blob/73b2ad0f16066348aa47151b49d11ec51c7e531a/grab.go\" style=\"display: none\" rel=\"nofollow\">https://github.com/chromedp/pdlgen/blob/73b2ad0f16066348aa47151b49d11ec51c7e531a/grab.go</a></p>\n<p>たぶん情報の取得処理自体は完了していて、そこから何か仕様にもなにかがよくなくてエラーになっている。エラーメッセージに戻る。</p>\n<p>Panic自体はGoにおける例外処理的な仕組みなのかな？</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fmoneyforward.com%2Fengineers_blog%2F2020%2F09%2F09%2Fgoroutine-panic-handling%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://moneyforward.com/engineers_blog/2020/09/09/goroutine-panic-handling/\" style=\"display: none\" rel=\"nofollow\">https://moneyforward.com/engineers_blog/2020/09/09/goroutine-panic-handling/</a></p>\n<p>公式読まないでごめんだけど、雰囲気掴むために日本語ブログ読む。</p>\n<blockquote>\n<p>panicは、コールされるとプログラムが終了するビルトイン関数の事です。</p>\n</blockquote>\n<p>なるほど。で、実際にpanicを呼び出しているのはここだ。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Fchromedp%2Fpdlgen%2Fblob%2F5017836d2c839513555503c7fbbd884daafdf467%2Fgen%2Fgotpl%2Futil.go%23L143\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/chromedp/pdlgen/blob/5017836d2c839513555503c7fbbd884daafdf467/gen/gotpl/util.go#L143\" style=\"display: none\" rel=\"nofollow\">https://github.com/chromedp/pdlgen/blob/5017836d2c839513555503c7fbbd884daafdf467/gen/gotpl/util.go#L143</a></p>\n<p>大元はここ</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Fchromedp%2Fpdlgen%2Fblob%2F99c9ca13bbaef6b33dec6d46e232ce22367fc1a7%2Fmain.go%23L233\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/chromedp/pdlgen/blob/99c9ca13bbaef6b33dec6d46e232ce22367fc1a7/main.go#L233\" style=\"display: none\" rel=\"nofollow\">https://github.com/chromedp/pdlgen/blob/99c9ca13bbaef6b33dec6d46e232ce22367fc1a7/main.go#L233</a></p>\n<p>めちゃくちゃ一つの関数長いじゃんか...。でも読まなきゃわからんので読む。</p>\n","author_association":"OWNER","created_at":"2022-08-21T07:46:56Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/69#issuecomment-1221491767","id":1221491767,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69","node_id":"IC_kwDOHWTPVs5Iznw3","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221491767/reactions"},"updated_at":"2022-08-21T07:46:56Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221491767","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},{"body":"え〜と、`*`はポインタを指しているでいいんだよね。\n\n```go\nvar (\n    flagCache = flag.String(\"cache\", \"\", \"protocol cache directory\")\n)\n```\n\n最初にここで宣言している。flagは標準のpackageで、コマンドラインで渡されるフラグをパースできるやつだそう。\n\nhttps://pkg.go.dev/flag\n\n```bash\n$ cdproto-gen --help\n\nUsage of cdproto-gen:\n  -cache string\n        protocol cache directory\n```\n\nOptionParserみたいなものか。指定がなければ、osのUserCacheDirを使うみたい。osはGo本体に含まれているみたい。\n\n続いて、取得対象のChromiumのバージョンを取得しているんだけど、これどういう意味かぱっと見でわからんな。\n\n```go\nif *flagChromium, err = util.GetLatestVersion(util.Cache{\n    URL:  util.ChromiumBase,\n    Path: filepath.Join(*flagCache, \"html\", \"chromium.html\"),\n    TTL:  *flagTTL,\n}); err != nil {\n    return err\n}\n```\n\nif文の条件のところで定義できるってやるだと思うんだけど...\n\n```go\n*flagChromium, err = util.GetLatestVersion(util.Cache{\n    URL:  util.ChromiumBase,\n    Path: filepath.Join(*flagCache, \"html\", \"chromium.html\"),\n    TTL:  *flagTTL,\n});\n```\n\nここまでがたぶん代入のところだよね。ようはutilityとして定義した関数がerrを返さなければOKということでしょう。\n\n同様にパラメータの定義が進んでいき、続いてプロトコル定義のロードっぽいです。\n","bodyHTML":"<p>え〜と、<code>*</code>はポインタを指しているでいいんだよね。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n    flagCache <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cache\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"protocol cache directory\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div><p>最初にここで宣言している。flagは標準のpackageで、コマンドラインで渡されるフラグをパースできるやつだそう。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fpkg.go.dev%2Fflag\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://pkg.go.dev/flag\" style=\"display: none\" rel=\"nofollow\">https://pkg.go.dev/flag</a></p>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">$ cdproto-gen --help\n\nUsage of cdproto-gen:\n  -cache string\n        protocol cache directory\n</code></pre></div><p>OptionParserみたいなものか。指定がなければ、osのUserCacheDirを使うみたい。osはGo本体に含まれているみたい。</p>\n<p>続いて、取得対象のChromiumのバージョンを取得しているんだけど、これどういう意味かぱっと見でわからんな。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> <span class=\"token operator\">*</span>flagChromium<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> util<span class=\"token punctuation\">.</span><span class=\"token function\">GetLatestVersion</span><span class=\"token punctuation\">(</span>util<span class=\"token punctuation\">.</span>Cache<span class=\"token punctuation\">{</span>\n    URL<span class=\"token punctuation\">:</span>  util<span class=\"token punctuation\">.</span>ChromiumBase<span class=\"token punctuation\">,</span>\n    Path<span class=\"token punctuation\">:</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>flagCache<span class=\"token punctuation\">,</span> <span class=\"token string\">\"html\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"chromium.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    TTL<span class=\"token punctuation\">:</span>  <span class=\"token operator\">*</span>flagTTL<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>if文の条件のところで定義できるってやるだと思うんだけど...</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token operator\">*</span>flagChromium<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> util<span class=\"token punctuation\">.</span><span class=\"token function\">GetLatestVersion</span><span class=\"token punctuation\">(</span>util<span class=\"token punctuation\">.</span>Cache<span class=\"token punctuation\">{</span>\n    URL<span class=\"token punctuation\">:</span>  util<span class=\"token punctuation\">.</span>ChromiumBase<span class=\"token punctuation\">,</span>\n    Path<span class=\"token punctuation\">:</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>flagCache<span class=\"token punctuation\">,</span> <span class=\"token string\">\"html\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"chromium.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    TTL<span class=\"token punctuation\">:</span>  <span class=\"token operator\">*</span>flagTTL<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>ここまでがたぶん代入のところだよね。ようはutilityとして定義した関数がerrを返さなければOKということでしょう。</p>\n<p>同様にパラメータの定義が進んでいき、続いてプロトコル定義のロードっぽいです。</p>\n","author_association":"OWNER","created_at":"2022-08-21T08:09:07Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/69#issuecomment-1221495140","id":1221495140,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69","node_id":"IC_kwDOHWTPVs5Izolk","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221495140/reactions"},"updated_at":"2022-08-21T08:09:07Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221495140","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},{"body":"https://github.com/chromedp/pdlgen/blob/99c9ca13bbaef6b33dec6d46e232ce22367fc1a7/main.go#L133\n\n```go\nfunc loadProtoDefs() (*pdl.PDL, error) {\n\tvar err error\n\n\tif *flagPdl != \"\" {\n\t\tutil.Logf(\"PROTOCOL: %s\", *flagPdl)\n\t\tbuf, err := ioutil.ReadFile(*flagPdl)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn pdl.Parse(buf)\n\t}\n\n\tvar protoDefs []*pdl.PDL\n\tload := func(urlstr, typ, ver string) error {\n\t\tbuf, err := util.Get(util.Cache{\n\t\t\tURL:    fmt.Sprintf(urlstr+\"?format=TEXT\", ver),\n\t\t\tPath:   filepath.Join(*flagCache, \"pdl\", typ, ver+\".pdl\"),\n\t\t\tTTL:    *flagTTL,\n\t\t\tDecode: true,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t// parse\n\t\tprotoDef, err := pdl.Parse(buf)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tprotoDefs = append(protoDefs, protoDef)\n\t\treturn nil\n\t}\n\n\t// grab browser + js definition\n\tif err = load(util.ChromiumURL, \"chromium\", *flagChromium); err != nil {\n\t\treturn nil, err\n\t}\n\tif err = load(util.V8URL, \"v8\", *flagV8); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// grab har definition\n\thar, err := pdl.Parse([]byte(pdl.HAR))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn pdl.Combine(append(protoDefs, har)...), nil\n}\n```\n\nGoには組み込みのerror型がある\n\n```go\ntype error interface {\n    Error() string\n}\n```\n\npdlを引数として渡した場合は、渡したpdlをパースして終了。\n\n```go\nvar protoDefs []*pdl.PDL\n```\n\nこういうのもスラスラ読めないの辛いな。え〜と、`var`で変数宣言なので、`protoDefs`という変数を宣言している。後ろにあるのが型なので、`[]*pdl.PDL`型ってことかな。\n\nで、`[]`はスライスで、`*pdl.PDL`はポインタなので、この長さを持ったスライス？\n\n長さは関係なかった。`pdl.PDL`は次の定義となっている\n\n```go\ntype PDL struct { \n    // Copyright is the file copyright.\n    Copyright string\n\n    // Version is the file version information.\n    Version *Version\n\n    // Domains are the available domains.\n    Domains []*Domain\n}\n```\n\nあれ、関数の宣言で引数の型を省略したらGoではどうなるの？あ〜、2つ以上の引数の型が同じ梅は、最後の型を省略して記述できる。\n\n---\n\n処理の大枠の流れとしては、\n\n1. 取得したPDLファイルを読み込む\n2. 読み込んだPDLをParseして、protoDefという変数に突っ込んであげる\n\nって感じ。ポインタが謎すぎる。で、関数はファーストクラスファンクションなので、この処理を`load`として動的に定義してあげる。そっか、ここで関数として切り出さないんだな。`protoDef`をこの関数全体のコンテキストで共有していて、それに依存するし、関数化したい思ったのは、あくまで2回出てくるからくらいなので、ここで定義しているって感じか。\n\nソースをみている感じ、PDLの中にHARの定義も書いてあって、これも読み取っている。\n\nで、最終的に\n\n```go\nreturn pdl.Combine(append(protoDefs, har)...), nil\n```\n\nってやっているんだけど、これ何？特に`...`\n","bodyHTML":"<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Fchromedp%2Fpdlgen%2Fblob%2F99c9ca13bbaef6b33dec6d46e232ce22367fc1a7%2Fmain.go%23L133\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/chromedp/pdlgen/blob/99c9ca13bbaef6b33dec6d46e232ce22367fc1a7/main.go#L133\" style=\"display: none\" rel=\"nofollow\">https://github.com/chromedp/pdlgen/blob/99c9ca13bbaef6b33dec6d46e232ce22367fc1a7/main.go#L133</a></p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">loadProtoDefs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pdl<span class=\"token punctuation\">.</span>PDL<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">*</span>flagPdl <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\tutil<span class=\"token punctuation\">.</span><span class=\"token function\">Logf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PROTOCOL: %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>flagPdl<span class=\"token punctuation\">)</span>\n\t\tbuf<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>flagPdl<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> pdl<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">var</span> protoDefs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>pdl<span class=\"token punctuation\">.</span>PDL\n\tload <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>urlstr<span class=\"token punctuation\">,</span> typ<span class=\"token punctuation\">,</span> ver <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t\tbuf<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> util<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>util<span class=\"token punctuation\">.</span>Cache<span class=\"token punctuation\">{</span>\n\t\t\tURL<span class=\"token punctuation\">:</span>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span>urlstr<span class=\"token operator\">+</span><span class=\"token string\">\"?format=TEXT\"</span><span class=\"token punctuation\">,</span> ver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tPath<span class=\"token punctuation\">:</span>   filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>flagCache<span class=\"token punctuation\">,</span> <span class=\"token string\">\"pdl\"</span><span class=\"token punctuation\">,</span> typ<span class=\"token punctuation\">,</span> ver<span class=\"token operator\">+</span><span class=\"token string\">\".pdl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tTTL<span class=\"token punctuation\">:</span>    <span class=\"token operator\">*</span>flagTTL<span class=\"token punctuation\">,</span>\n\t\t\tDecode<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> err\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// parse</span>\n\t\tprotoDef<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> pdl<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> err\n\t\t<span class=\"token punctuation\">}</span>\n\t\tprotoDefs <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>protoDefs<span class=\"token punctuation\">,</span> protoDef<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// grab browser + js definition</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">=</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>util<span class=\"token punctuation\">.</span>ChromiumURL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"chromium\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>flagChromium<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">=</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>util<span class=\"token punctuation\">.</span>V8URL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"v8\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>flagV8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// grab har definition</span>\n\thar<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> pdl<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>pdl<span class=\"token punctuation\">.</span>HAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> pdl<span class=\"token punctuation\">.</span><span class=\"token function\">Combine</span><span class=\"token punctuation\">(</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>protoDefs<span class=\"token punctuation\">,</span> har<span class=\"token punctuation\">)</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>Goには組み込みのerror型がある</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> <span class=\"token builtin\">error</span> <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>pdlを引数として渡した場合は、渡したpdlをパースして終了。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> protoDefs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>pdl<span class=\"token punctuation\">.</span>PDL\n</code></pre></div><p>こういうのもスラスラ読めないの辛いな。え〜と、<code>var</code>で変数宣言なので、<code>protoDefs</code>という変数を宣言している。後ろにあるのが型なので、<code>[]*pdl.PDL</code>型ってことかな。</p>\n<p>で、<code>[]</code>はスライスで、<code>*pdl.PDL</code>はポインタなので、この長さを持ったスライス？</p>\n<p>長さは関係なかった。<code>pdl.PDL</code>は次の定義となっている</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> PDL <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token comment\">// Copyright is the file copyright.</span>\n    Copyright <span class=\"token builtin\">string</span>\n\n    <span class=\"token comment\">// Version is the file version information.</span>\n    Version <span class=\"token operator\">*</span>Version\n\n    <span class=\"token comment\">// Domains are the available domains.</span>\n    Domains <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>Domain\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>あれ、関数の宣言で引数の型を省略したらGoではどうなるの？あ〜、2つ以上の引数の型が同じ梅は、最後の型を省略して記述できる。</p>\n<hr>\n<p>処理の大枠の流れとしては、</p>\n<ol>\n<li>取得したPDLファイルを読み込む</li>\n<li>読み込んだPDLをParseして、protoDefという変数に突っ込んであげる</li>\n</ol>\n<p>って感じ。ポインタが謎すぎる。で、関数はファーストクラスファンクションなので、この処理を<code>load</code>として動的に定義してあげる。そっか、ここで関数として切り出さないんだな。<code>protoDef</code>をこの関数全体のコンテキストで共有していて、それに依存するし、関数化したい思ったのは、あくまで2回出てくるからくらいなので、ここで定義しているって感じか。</p>\n<p>ソースをみている感じ、PDLの中にHARの定義も書いてあって、これも読み取っている。</p>\n<p>で、最終的に</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">return</span> pdl<span class=\"token punctuation\">.</span><span class=\"token function\">Combine</span><span class=\"token punctuation\">(</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>protoDefs<span class=\"token punctuation\">,</span> har<span class=\"token punctuation\">)</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n</code></pre></div><p>ってやっているんだけど、これ何？特に<code>...</code></p>\n","author_association":"OWNER","created_at":"2022-08-21T11:29:29Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/69#issuecomment-1221526862","id":1221526862,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69","node_id":"IC_kwDOHWTPVs5IzwVO","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221526862/reactions"},"updated_at":"2022-08-21T11:29:29Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221526862","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},{"body":"一旦調査に時間がかかりすぎる部分は置いておいて、残りをみてみることにする。\n\nまた`main.run`に戻って来た。\n\n`loadProtoDefs`を用いて、PDLの情報を`protoDefs`に代入する。\n\n`sort.Slice`: これは標準っぽい。\n\nhttps://qiita.com/Sekky0905/items/2d5ccd6d076106e9d21c\n\n- ソートには安定ソートという概念がある。\n- sort packageのSliceは安定ソートを保証せず、SliceStableは安定ソートを保する\n\n第2引数に関数を渡しているけど、一般的にいえばこの関数で比較してソートしてそう。\n\n```go\nsort.Slice(protoDefs.Domains, func(i, j int) bool {\nreturn strings.Compare(protoDefs.Domains[i].Domain.String(), protoDefs.Domains[j].Domain.String()) <= 0\n})\n```\n\nで、この後にフォルダを作成して、どんどん書き込んでいく。\n\n```go\nif d.Deprecated {\n\tvar extra []string\n\textra = append(extra, \"deprecated\")\n\tutil.Logf(\"SKIPPING(%s): %s %v\", pad(\"domain\", 7), d.Domain.String(), extra)\n\tcontinue\n}\n```\n\nで、どうもDeprecatedなものがあれば、スキップされているみたい。\n\nこのあとREADMEにもあった、`fixup`処理をやっているんだけど、これはなに？\n\n```go\n// fixup\nfixup.FixDomains(processed)\n```\n\npdlgen/fixup/fixup.goに飛んだ。コメントには何が書いてある？\n\n```go\n// FixDomains modifies, updates, alters, fixes, and adds to the types defined\n// in the domains, so that the generated Chrome DevTools Protocol domain code\n// is more Go-like and easier to use.\n//\n// Please see package-level documentation for the list of changes made to the\n// various domains.\nfunc FixDomains(domains []*pdl.Domain) {\n```\n\nってことで、Packageのドキュメントをみてみる。\n\n```go\n// Package fixup modifies/alters/fixes and adds to the low level type\n// definitions for the Chrome DevTools Protocol domains, as generated from\n// protocol.json.\n//\n// The goal of package fixup is to fix the issues associated with generating Go\n// code from the existing Chrome domain definitions, and is wrapped up in one\n// high-level func, FixDomains.\n//\n// Currently, FixDomains does the following:\n//  - add `Inspector.DetachReason` type and change `Inspector.detached.reason`\n//    type to `Inspector.DetachReason`.\n//  - change `Network.TimeSinceEpoch`, `Network.MonotonicTime`, and\n//    `Runtime.Timestamp` types to `TimestampTypeSecond` and\n//    `TimestampTypeMonotonic`.\n//  - convert all object properties and event/command parameters that are enums\n//    into separate types.\n//  - change any object property named `modifiers` to type `Input.Modifier`.\n//  - add `DOM.NodeType` type and set any parameter named `nodeType`'s type to\n//    `DOM.NodeType`.\n//  - change `Page.Frame.{id,parentID}` property named `modifiers` to type `Input.Modifier`.\n//  - add `DOM.NodeType` type and set any parameter named `nodeType`'s type to\n//    `DOM.NodeType`.\n//  - change `Page.Frame.{id,parentID}` properties to `FrameID` type.\n//  - add additional properties to `Page.Frame` and `DOM.Node` for use by\n//    higher level packages.\n//  - add special unmarshaler to `Page.{NodeId,BackendNodeId,FrameId}` types to\n//    handle unquoted values from older (v1.1) protocol versions. NOTE: it may\n//    be necessary in the future to apply this to more types, such as\n//    `Network.LoaderId`.\n//  - rename `Input.GestureSourceType` to `Input.GestureType`.\n//  - fix type/name stuttering by stripping the package name from any type\n//    where the package name is a prefix (ie, `CSS` domain).\n//  - add Error() method to `Runtime.ExceptionDetails` so that it can be used\n//    as error.\n//  - change `Network.Headers` type to map[string]interface{}.\n//\n// Please note that the above is not an exhaustive list of all modifications\n// applied to the domains, however it does attempt \n```\n\n細かいことは「Currently, ...」以下にまとめられているけど、CDPのプロトコルから、GoLikeな感じでコードを生成するために必要な情報を付与している。\nあと備忘として、ここにある情報だけがやっていることの全てではないことに注意。\n\nこれRubyでやるときにどうするかなあ。RBSでやってもいいけど、実装時間が足りないかんじするよな。\n\n","bodyHTML":"<p>一旦調査に時間がかかりすぎる部分は置いておいて、残りをみてみることにする。</p>\n<p>また<code>main.run</code>に戻って来た。</p>\n<p><code>loadProtoDefs</code>を用いて、PDLの情報を<code>protoDefs</code>に代入する。</p>\n<p><code>sort.Slice</code>: これは標準っぽい。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fqiita.com%2FSekky0905%2Fitems%2F2d5ccd6d076106e9d21c\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://qiita.com/Sekky0905/items/2d5ccd6d076106e9d21c\" style=\"display: none\" rel=\"nofollow\">https://qiita.com/Sekky0905/items/2d5ccd6d076106e9d21c</a></p>\n<ul>\n<li>ソートには安定ソートという概念がある。</li>\n<li>sort packageのSliceは安定ソートを保証せず、SliceStableは安定ソートを保する</li>\n</ul>\n<p>第2引数に関数を渡しているけど、一般的にいえばこの関数で比較してソートしてそう。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\">sort<span class=\"token punctuation\">.</span><span class=\"token function\">Slice</span><span class=\"token punctuation\">(</span>protoDefs<span class=\"token punctuation\">.</span>Domains<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Compare</span><span class=\"token punctuation\">(</span>protoDefs<span class=\"token punctuation\">.</span>Domains<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Domain<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> protoDefs<span class=\"token punctuation\">.</span>Domains<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Domain<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p>で、この後にフォルダを作成して、どんどん書き込んでいく。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> d<span class=\"token punctuation\">.</span>Deprecated <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> extra <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n\textra <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>extra<span class=\"token punctuation\">,</span> <span class=\"token string\">\"deprecated\"</span><span class=\"token punctuation\">)</span>\n\tutil<span class=\"token punctuation\">.</span><span class=\"token function\">Logf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SKIPPING(%s): %s %v\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">pad</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"domain\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>Domain<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> extra<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">continue</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>で、どうもDeprecatedなものがあれば、スキップされているみたい。</p>\n<p>このあとREADMEにもあった、<code>fixup</code>処理をやっているんだけど、これはなに？</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// fixup</span>\nfixup<span class=\"token punctuation\">.</span><span class=\"token function\">FixDomains</span><span class=\"token punctuation\">(</span>processed<span class=\"token punctuation\">)</span>\n</code></pre></div><p>pdlgen/fixup/fixup.goに飛んだ。コメントには何が書いてある？</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// FixDomains modifies, updates, alters, fixes, and adds to the types defined</span>\n<span class=\"token comment\">// in the domains, so that the generated Chrome DevTools Protocol domain code</span>\n<span class=\"token comment\">// is more Go-like and easier to use.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Please see package-level documentation for the list of changes made to the</span>\n<span class=\"token comment\">// various domains.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">FixDomains</span><span class=\"token punctuation\">(</span>domains <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>pdl<span class=\"token punctuation\">.</span>Domain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</code></pre></div><p>ってことで、Packageのドキュメントをみてみる。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Package fixup modifies/alters/fixes and adds to the low level type</span>\n<span class=\"token comment\">// definitions for the Chrome DevTools Protocol domains, as generated from</span>\n<span class=\"token comment\">// protocol.json.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The goal of package fixup is to fix the issues associated with generating Go</span>\n<span class=\"token comment\">// code from the existing Chrome domain definitions, and is wrapped up in one</span>\n<span class=\"token comment\">// high-level func, FixDomains.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Currently, FixDomains does the following:</span>\n<span class=\"token comment\">//  - add `Inspector.DetachReason` type and change `Inspector.detached.reason`</span>\n<span class=\"token comment\">//    type to `Inspector.DetachReason`.</span>\n<span class=\"token comment\">//  - change `Network.TimeSinceEpoch`, `Network.MonotonicTime`, and</span>\n<span class=\"token comment\">//    `Runtime.Timestamp` types to `TimestampTypeSecond` and</span>\n<span class=\"token comment\">//    `TimestampTypeMonotonic`.</span>\n<span class=\"token comment\">//  - convert all object properties and event/command parameters that are enums</span>\n<span class=\"token comment\">//    into separate types.</span>\n<span class=\"token comment\">//  - change any object property named `modifiers` to type `Input.Modifier`.</span>\n<span class=\"token comment\">//  - add `DOM.NodeType` type and set any parameter named `nodeType`'s type to</span>\n<span class=\"token comment\">//    `DOM.NodeType`.</span>\n<span class=\"token comment\">//  - change `Page.Frame.{id,parentID}` property named `modifiers` to type `Input.Modifier`.</span>\n<span class=\"token comment\">//  - add `DOM.NodeType` type and set any parameter named `nodeType`'s type to</span>\n<span class=\"token comment\">//    `DOM.NodeType`.</span>\n<span class=\"token comment\">//  - change `Page.Frame.{id,parentID}` properties to `FrameID` type.</span>\n<span class=\"token comment\">//  - add additional properties to `Page.Frame` and `DOM.Node` for use by</span>\n<span class=\"token comment\">//    higher level packages.</span>\n<span class=\"token comment\">//  - add special unmarshaler to `Page.{NodeId,BackendNodeId,FrameId}` types to</span>\n<span class=\"token comment\">//    handle unquoted values from older (v1.1) protocol versions. NOTE: it may</span>\n<span class=\"token comment\">//    be necessary in the future to apply this to more types, such as</span>\n<span class=\"token comment\">//    `Network.LoaderId`.</span>\n<span class=\"token comment\">//  - rename `Input.GestureSourceType` to `Input.GestureType`.</span>\n<span class=\"token comment\">//  - fix type/name stuttering by stripping the package name from any type</span>\n<span class=\"token comment\">//    where the package name is a prefix (ie, `CSS` domain).</span>\n<span class=\"token comment\">//  - add Error() method to `Runtime.ExceptionDetails` so that it can be used</span>\n<span class=\"token comment\">//    as error.</span>\n<span class=\"token comment\">//  - change `Network.Headers` type to map[string]interface{}.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Please note that the above is not an exhaustive list of all modifications</span>\n<span class=\"token comment\">// applied to the domains, however it does attempt </span>\n</code></pre></div><p>細かいことは「Currently, ...」以下にまとめられているけど、CDPのプロトコルから、GoLikeな感じでコードを生成するために必要な情報を付与している。<br>\nあと備忘として、ここにある情報だけがやっていることの全てではないことに注意。</p>\n<p>これRubyでやるときにどうするかなあ。RBSでやってもいいけど、実装時間が足りないかんじするよな。</p>\n","author_association":"OWNER","created_at":"2022-08-21T11:50:38Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/69#issuecomment-1221530113","id":1221530113,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69","node_id":"IC_kwDOHWTPVs5IzxIB","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221530113/reactions"},"updated_at":"2022-08-21T11:50:38Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221530113","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},{"body":"で、次にgeneratorの生成をやっている。\n\n```go\ngenerator := gen.Generators()[\"go\"]\nif generator == nil {\n\treturn errors.New(\"no generator\")\n}\n```\n\n`gen.Generators()`の中身はこうなっている。\n\n```go\ntype Generator func([]*pdl.Domain, string) (Emitter, error)\n\n// Generators returns all the various Chrome DevTools Protocol generators.\nfunc Generators() map[string]Generator {\n\treturn map[string]Generator{\n\t\t\"go\": NewGoGenerator,\n\t}\n}\n```\n\nいまいちこの`type`による関数定義が何をしているのかよくわかっていない。\n\nhttps://qiita.com/tenntenn/items/45c568d43e950292bc31\n\n> typeという予約語を用いると、既存の型や型リテラルに別名をつけることができます\n\nあ〜、この記事で一番大事なのはここだ\n\n> typeやメソッドが構造体ありきで学習していくと、後々、http.HandlerFuncなどに出くわしたときに、きちんと理解できず、「おまじない」になってしまいがちです。言語仕様をきちんと読み、普段なんとなく書いている記述が文法上どのように定義されているのか理解することで、今まできちんと理解してなかった概念や知らなかった概念を知る機会になります。Goの言語仕様は、そんなに長くなく、少しずつ読んでいけばちゃんと読める量なので、ぜひ読んでみることをオススメします。英語が厳しい方は、文法を定義したBNFを斜め読みするだけでも十分効果はあると思います。\n\nとりあえずこの部分については、`([]*pdl.Domain, string)`を引数に取り、`(Emitter, error)`を戻り値として返す関数を`Generator`という名前の型として定義しますよ、ってことだ。\n\nで、このEmitterについては直後に定義があって、\n\n```go\ntype Emitter interface {\n\tEmit() map[string]*bytes.Buffer\n}\n```\n\nで、元に戻って、`NewGoGenerator`は何かという話。\n\n```go\nfunc Generators() map[string]Generator {\n\treturn map[string]Generator{\n\t\t\"go\": NewGoGenerator,\n\t}\n}\n```\n\nこれは`pdlgen/gen/gogen.go`に定義されている。ここが核であり、おそらくこの生成結果によって、後ちょっとでpanicになる。`\n","bodyHTML":"<p>で、次にgeneratorの生成をやっている。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\">generator <span class=\"token operator\">:=</span> gen<span class=\"token punctuation\">.</span><span class=\"token function\">Generators</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"go\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">if</span> generator <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no generator\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><code>gen.Generators()</code>の中身はこうなっている。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Generator <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>pdl<span class=\"token punctuation\">.</span>Domain<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Emitter<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Generators returns all the various Chrome DevTools Protocol generators.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Generators</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Generator <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Generator<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">\"go\"</span><span class=\"token punctuation\">:</span> NewGoGenerator<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>いまいちこの<code>type</code>による関数定義が何をしているのかよくわかっていない。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fqiita.com%2Ftenntenn%2Fitems%2F45c568d43e950292bc31\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://qiita.com/tenntenn/items/45c568d43e950292bc31\" style=\"display: none\" rel=\"nofollow\">https://qiita.com/tenntenn/items/45c568d43e950292bc31</a></p>\n<blockquote>\n<p>typeという予約語を用いると、既存の型や型リテラルに別名をつけることができます</p>\n</blockquote>\n<p>あ〜、この記事で一番大事なのはここだ</p>\n<blockquote>\n<p>typeやメソッドが構造体ありきで学習していくと、後々、http.HandlerFuncなどに出くわしたときに、きちんと理解できず、「おまじない」になってしまいがちです。言語仕様をきちんと読み、普段なんとなく書いている記述が文法上どのように定義されているのか理解することで、今まできちんと理解してなかった概念や知らなかった概念を知る機会になります。Goの言語仕様は、そんなに長くなく、少しずつ読んでいけばちゃんと読める量なので、ぜひ読んでみることをオススメします。英語が厳しい方は、文法を定義したBNFを斜め読みするだけでも十分効果はあると思います。</p>\n</blockquote>\n<p>とりあえずこの部分については、<code>([]*pdl.Domain, string)</code>を引数に取り、<code>(Emitter, error)</code>を戻り値として返す関数を<code>Generator</code>という名前の型として定義しますよ、ってことだ。</p>\n<p>で、このEmitterについては直後に定義があって、</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Emitter <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">Emit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>bytes<span class=\"token punctuation\">.</span>Buffer\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>で、元に戻って、<code>NewGoGenerator</code>は何かという話。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Generators</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Generator <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Generator<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">\"go\"</span><span class=\"token punctuation\">:</span> NewGoGenerator<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>これは<code>pdlgen/gen/gogen.go</code>に定義されている。ここが核であり、おそらくこの生成結果によって、後ちょっとでpanicになる。`</p>\n","author_association":"OWNER","created_at":"2022-08-21T12:14:46Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/69#issuecomment-1221533990","id":1221533990,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69","node_id":"IC_kwDOHWTPVs5IzyEm","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221533990/reactions"},"updated_at":"2022-08-21T12:14:46Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221533990","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},{"body":"```go\n// NewGoGenerator creates a Go source code generator for the Chrome DevTools\n// Protocol domain definitions.\nfunc NewGoGenerator(domains []*pdl.Domain, basePkg string) (Emitter, error) {\n\tvar w *qtpl.Writer\n```\n\n冒頭に`qtpl`という意味のわからない文字列が出てくるけど、これは`quicktemplate`というGoのテンプレートエンジンだそう。\n\nhttps://github.com/valyala/quicktemplate\n\n> A fast, powerful, yet easy to use template engine for Go. Inspired by the Mako templates philosophy.\n\nで、このquicktemplateはPythonの`Mako templates`の哲学に影響を受けているんだと。\n\nhttps://www.makotemplates.org/\n\nなんかerbみたいな感じがするな。というわけでRubyに戻る\n\nhttps://magazine.rubyist.net/articles/0024/0024-TemplateSystem.html\n\nこの感じだとどうもHTML（というかそれに近いもの）を出力しそうな感じだけど、最終成果物はどうなるんだろう？\nGoに戻ろう。\n\n```go\n// generate individual domains\nfor _, d := range domains {\n\tpkgName := genutil.PackageName(d)\n\tpkgOut := filepath.Join(pkgName, pkgName+\".go\")\n\n\t// do command template\n\tw = fb.get(pkgOut, pkgName, d, domains, basePkg)\n\tgotpl.StreamDomainTemplate(w, d, domains)\n\tfb.release(w)\n\n\t// generate domain types\n\tif len(d.Types) != 0 {\n\t\tfb.generateTypes(\n\t\t\tfilepath.Join(pkgName, \"types.go\"),\n\t\t\td.Types, gotpl.TypePrefix, gotpl.TypeSuffix,\n\t\t\td, domains,\n\t\t\tbasePkg,\n\t\t)\n\t}\n\n\t// generate domain event types\n\tif len(d.Events) != 0 {\n\t\tfb.generateTypes(\n\t\t\tfilepath.Join(pkgName, \"events.go\"),\n\t\t\td.Events, gotpl.EventTypePrefix, gotpl.EventTypeSuffix,\n\t\t\td, domains,\n\t\t\tbasePkg,\n\t\t)\n\t}\n}\n```\n\n次はここみるところから。\n","bodyHTML":"<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// NewGoGenerator creates a Go source code generator for the Chrome DevTools</span>\n<span class=\"token comment\">// Protocol domain definitions.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewGoGenerator</span><span class=\"token punctuation\">(</span>domains <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>pdl<span class=\"token punctuation\">.</span>Domain<span class=\"token punctuation\">,</span> basePkg <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Emitter<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> w <span class=\"token operator\">*</span>qtpl<span class=\"token punctuation\">.</span>Writer\n</code></pre></div><p>冒頭に<code>qtpl</code>という意味のわからない文字列が出てくるけど、これは<code>quicktemplate</code>というGoのテンプレートエンジンだそう。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Fvalyala%2Fquicktemplate\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/valyala/quicktemplate\" style=\"display: none\" rel=\"nofollow\">https://github.com/valyala/quicktemplate</a></p>\n<blockquote>\n<p>A fast, powerful, yet easy to use template engine for Go. Inspired by the Mako templates philosophy.</p>\n</blockquote>\n<p>で、このquicktemplateはPythonの<code>Mako templates</code>の哲学に影響を受けているんだと。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fwww.makotemplates.org%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://www.makotemplates.org/\" style=\"display: none\" rel=\"nofollow\">https://www.makotemplates.org/</a></p>\n<p>なんかerbみたいな感じがするな。というわけでRubyに戻る</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fmagazine.rubyist.net%2Farticles%2F0024%2F0024-TemplateSystem.html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://magazine.rubyist.net/articles/0024/0024-TemplateSystem.html\" style=\"display: none\" rel=\"nofollow\">https://magazine.rubyist.net/articles/0024/0024-TemplateSystem.html</a></p>\n<p>この感じだとどうもHTML（というかそれに近いもの）を出力しそうな感じだけど、最終成果物はどうなるんだろう？<br>\nGoに戻ろう。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// generate individual domains</span>\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> d <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> domains <span class=\"token punctuation\">{</span>\n\tpkgName <span class=\"token operator\">:=</span> genutil<span class=\"token punctuation\">.</span><span class=\"token function\">PackageName</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n\tpkgOut <span class=\"token operator\">:=</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>pkgName<span class=\"token punctuation\">,</span> pkgName<span class=\"token operator\">+</span><span class=\"token string\">\".go\"</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// do command template</span>\n\tw <span class=\"token operator\">=</span> fb<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>pkgOut<span class=\"token punctuation\">,</span> pkgName<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> domains<span class=\"token punctuation\">,</span> basePkg<span class=\"token punctuation\">)</span>\n\tgotpl<span class=\"token punctuation\">.</span><span class=\"token function\">StreamDomainTemplate</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> domains<span class=\"token punctuation\">)</span>\n\tfb<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// generate domain types</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\tfb<span class=\"token punctuation\">.</span><span class=\"token function\">generateTypes</span><span class=\"token punctuation\">(</span>\n\t\t\tfilepath<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>pkgName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"types.go\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\td<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">,</span> gotpl<span class=\"token punctuation\">.</span>TypePrefix<span class=\"token punctuation\">,</span> gotpl<span class=\"token punctuation\">.</span>TypeSuffix<span class=\"token punctuation\">,</span>\n\t\t\td<span class=\"token punctuation\">,</span> domains<span class=\"token punctuation\">,</span>\n\t\t\tbasePkg<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// generate domain event types</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>Events<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\tfb<span class=\"token punctuation\">.</span><span class=\"token function\">generateTypes</span><span class=\"token punctuation\">(</span>\n\t\t\tfilepath<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>pkgName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"events.go\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\td<span class=\"token punctuation\">.</span>Events<span class=\"token punctuation\">,</span> gotpl<span class=\"token punctuation\">.</span>EventTypePrefix<span class=\"token punctuation\">,</span> gotpl<span class=\"token punctuation\">.</span>EventTypeSuffix<span class=\"token punctuation\">,</span>\n\t\t\td<span class=\"token punctuation\">,</span> domains<span class=\"token punctuation\">,</span>\n\t\t\tbasePkg<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>次はここみるところから。</p>\n","author_association":"OWNER","created_at":"2022-08-21T13:03:15Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/69#issuecomment-1221541868","id":1221541868,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69","node_id":"IC_kwDOHWTPVs5Izz_s","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221541868/reactions"},"updated_at":"2022-08-21T13:03:15Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221541868","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}}]},"__N_SSG":true}