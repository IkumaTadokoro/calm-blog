{"pageProps":{"issue":{"body":"","bodyHTML":"","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/74/comments","created_at":"2022-08-28T00:38:08Z","events_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/74/events","html_url":"https://github.com/IkumaTadokoro/diary/issues/74","id":1353208969,"labels":[],"labels_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/74/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHWTPVs5QqFSJ","number":74,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/74/reactions"},"repository_url":"https://api.github.com/repos/IkumaTadokoro/diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/74/timeline","title":"2022-08-28","updated_at":"2022-08-28T00:38:08Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/74","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},"issueComments":[{"body":"一夜明けて、記憶無くなる。再開。\n\n今確認している事象自体はIssueとして上がっているんだけど、だいぶ前。\nかつなんか微妙に解決していない。\n\n一方で、cdprotoのリポジトリをみると、ちゃんと定義が生成されているっぽい。\nどれを使って更新されているか確認してみる。\n\nkenshawって人が呪王でpushしているっぽい？だとするとそれをどう生成しているかは確認できないな\n\nでもREADMEにはcdproto-genコマンドを使っているってあるから、どうなっているんだよという感じではある。\n","bodyHTML":"<p>一夜明けて、記憶無くなる。再開。</p>\n<p>今確認している事象自体はIssueとして上がっているんだけど、だいぶ前。<br>\nかつなんか微妙に解決していない。</p>\n<p>一方で、cdprotoのリポジトリをみると、ちゃんと定義が生成されているっぽい。<br>\nどれを使って更新されているか確認してみる。</p>\n<p>kenshawって人が呪王でpushしているっぽい？だとするとそれをどう生成しているかは確認できないな</p>\n<p>でもREADMEにはcdproto-genコマンドを使っているってあるから、どうなっているんだよという感じではある。</p>\n","author_association":"OWNER","created_at":"2022-08-28T00:47:54Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/74#issuecomment-1229348326","id":1229348326,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/74","node_id":"IC_kwDOHWTPVs5JRl3m","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1229348326/reactions"},"updated_at":"2022-08-28T00:47:54Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1229348326","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},{"body":"これもしかして、oldブランチに切り替えたらうまくいったりするのか？\n\n```bash\ngo install github.com/chromedp/cdproto-gen@cdproto-gen@old\n```\n\n```bash\n$ cdproto-gen\n\neasyjson-bootstrap693351085.go:14:3: no required module provides package github.com/chromedp/cdproto/media: go.mod file not found in current directory or any parent directory; see 'go help modules'\n# こんなのがめっちゃでている\n```\n\nとはいえ、oldブランチに切り替えたら今まで落ちているところも落ちないようになった。\n少なくとも\n\nhttps://github.com/chromedp/pdlgen/blob/abc6091f7244e5c70d1a9ef38f70ec9a6b209d39/main.go#L283\n\nここまで到達するようになった。後一息である。\n\nhttps://github.com/mailru/easyjson\n\nGoの構造体とJSONをリフレクションなしに簡潔かつ高速に変換できるパッケージ（リフレクションis何）。標準で`encoding/json`があるけど、それよりも早い。\n\n---\n\npdlgenのREADMEに書いてあった\n\n> The -out command-line option should point to the directory into which the github.com/chromedp/cdproto repository is cloned, so that easyjson can find the go.mod file and use it.\n\nというわけで、このソースも落としてくる。\n\n```bash\nghq get git@github.com:chromedp/cdproto.git\ncdproto-gen -out=/Users/ikuma/src/github.com/chromedp/cdproto\n```\n\nこれでやっと動いたよ...\n\n\n","bodyHTML":"<p>これもしかして、oldブランチに切り替えたらうまくいったりするのか？</p>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">go <span class=\"token function\">install</span> github.com/chromedp/cdproto-gen@cdproto-gen@old\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">$ cdproto-gen\n\neasyjson-bootstrap693351085.go:14:3: no required module provides package github.com/chromedp/cdproto/media: go.mod <span class=\"token function\">file</span> not found <span class=\"token keyword\">in</span> current directory or any parent directory<span class=\"token punctuation\">;</span> see <span class=\"token string\">'go help modules'</span>\n<span class=\"token comment\"># こんなのがめっちゃでている</span>\n</code></pre></div><p>とはいえ、oldブランチに切り替えたら今まで落ちているところも落ちないようになった。<br>\n少なくとも</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Fchromedp%2Fpdlgen%2Fblob%2Fabc6091f7244e5c70d1a9ef38f70ec9a6b209d39%2Fmain.go%23L283\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/chromedp/pdlgen/blob/abc6091f7244e5c70d1a9ef38f70ec9a6b209d39/main.go#L283\" style=\"display: none\" rel=\"nofollow\">https://github.com/chromedp/pdlgen/blob/abc6091f7244e5c70d1a9ef38f70ec9a6b209d39/main.go#L283</a></p>\n<p>ここまで到達するようになった。後一息である。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Fmailru%2Feasyjson\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/mailru/easyjson\" style=\"display: none\" rel=\"nofollow\">https://github.com/mailru/easyjson</a></p>\n<p>Goの構造体とJSONをリフレクションなしに簡潔かつ高速に変換できるパッケージ（リフレクションis何）。標準で<code>encoding/json</code>があるけど、それよりも早い。</p>\n<hr>\n<p>pdlgenのREADMEに書いてあった</p>\n<blockquote>\n<p>The -out command-line option should point to the directory into which the github.com/chromedp/cdproto repository is cloned, so that easyjson can find the go.mod file and use it.</p>\n</blockquote>\n<p>というわけで、このソースも落としてくる。</p>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">ghq get git@github.com:chromedp/cdproto.git\ncdproto-gen <span class=\"token parameter variable\">-out</span><span class=\"token operator\">=</span>/Users/ikuma/src/github.com/chromedp/cdproto\n</code></pre></div><p>これでやっと動いたよ...</p>\n","author_association":"OWNER","created_at":"2022-08-28T02:06:47Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/74#issuecomment-1229357137","id":1229357137,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/74","node_id":"IC_kwDOHWTPVs5JRoBR","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1229357137/reactions"},"updated_at":"2022-08-28T02:06:47Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1229357137","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},{"body":"生成物を見ていくけど、これ結局cd-protoができたっていうだけだな？\n\n自動生成のところは大体仕組みを理解したので、次はこれを利用しているchromedp本体の挙動を確かめていく。\n\n今回Olaywrightを実装するにあたって、HTTP→WebSocketの接続開始をどういう風にやるのがいいかのイメージがまだついていないので、ついでに参考にできるといいなという魂胆。\n","bodyHTML":"<p>生成物を見ていくけど、これ結局cd-protoができたっていうだけだな？</p>\n<p>自動生成のところは大体仕組みを理解したので、次はこれを利用しているchromedp本体の挙動を確かめていく。</p>\n<p>今回Olaywrightを実装するにあたって、HTTP→WebSocketの接続開始をどういう風にやるのがいいかのイメージがまだついていないので、ついでに参考にできるといいなという魂胆。</p>\n","author_association":"OWNER","created_at":"2022-08-28T05:49:05Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/74#issuecomment-1229382261","id":1229382261,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/74","node_id":"IC_kwDOHWTPVs5JRuJ1","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1229382261/reactions"},"updated_at":"2022-08-28T05:49:05Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1229382261","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},{"body":"```bash\n$ go install github.com/spf13/cobra-cli@latest\n$ vim ~/.cobra.yaml\n```\n\n```yaml\nauthor: ikuma-t <tadokorodev@gmail.com>\nlicense: MIT\n```\n\n```bash\n$ cd /path/to/directory\n$ go mod init github.com/IkumaTadokoro/helloworld\n$ cobra-cli init\n```\n\n```bash\n$ go install\n$ helloworld\n\nA longer description that spans multiple lines and likely contains\nexamples and usage of using your application. For example:\n\nCobra is a CLI library for Go that empowers applications.\nThis application is a tool to generate the needed files\nto quickly create a Cobra application.\n```\n\ncobraの引数には0番地から渡した引数が格納される。\n","bodyHTML":"<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">$ go <span class=\"token function\">install</span> github.com/spf13/cobra-cli@latest\n$ <span class=\"token function\">vim</span> ~/.cobra.yaml\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> ikuma<span class=\"token punctuation\">-</span>t &lt;tadokorodev@gmail.com<span class=\"token punctuation\">></span>\n<span class=\"token key atrule\">license</span><span class=\"token punctuation\">:</span> MIT\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> /path/to/directory\n$ go mod init github.com/IkumaTadokoro/helloworld\n$ cobra-cli init\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">$ go <span class=\"token function\">install</span>\n$ helloworld\n\nA longer description that spans multiple lines and likely contains\nexamples and usage of using your application. For example:\n\nCobra is a CLI library <span class=\"token keyword\">for</span> Go that empowers applications.\nThis application is a tool to generate the needed files\nto quickly create a Cobra application.\n</code></pre></div><p>cobraの引数には0番地から渡した引数が格納される。</p>\n","author_association":"OWNER","created_at":"2022-08-28T06:19:34Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/74#issuecomment-1229385612","id":1229385612,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/74","node_id":"IC_kwDOHWTPVs5JRu-M","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1229385612/reactions"},"updated_at":"2022-08-28T06:19:34Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1229385612","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},{"body":"cdprotoがCDPのSDK\n\nhttps://github.com/chromedp/cdproto\n\n```go\n// Message chrome DevTools Protocol message sent/read over websocket\n// connection.\ntype Message struct {\n\tID        int64               `json:\"id,omitempty\"`        // Unique message identifier.\n\tSessionID target.SessionID    `json:\"sessionId,omitempty\"` // Session that the message belongs to when using flat access.\n\tMethod    MethodType          `json:\"method,omitempty\"`    // Event or command type.\n\tParams    easyjson.RawMessage `json:\"params,omitempty\"`    // Event or command parameters.\n\tResult    easyjson.RawMessage `json:\"result,omitempty\"`    // Command return values.\n\tError     *Error              `json:\"error,omitempty\"`     // Error message.\n}\n```\n\nこういうMessageの構造体を持っていて、このMessageをJSONにシリアライズ（これはGoでいうところのMarshalなのかな）してWebSocketで送信する。\n\n---\n\nchromedp\n\nhttps://github.com/chromedp/chromedp\n\nchromedpが本体で、CDPのラッパーに相当する。内部的にはcdprotoを利用している。seleniumがWebDriverをラップしているようなイメージ。\n\n```bash\nghq get git@github.com:chromedp/examples.git\ngo run text/main.go\n```\n\nhttps://pkg.go.dev/time\n\nこれが表示されるようになっている。\n\n```bash\ngo run click/main.go\n```\n\nhttps://pkg.go.dev/time#After\n\nここのExampleをクリックするサンプルケース。\n\n\n構造を見てみよう。例えば前者の方はこうなっている\n\n```go\nfunc main() {\n\t// create context\n\tctx, cancel := chromedp.NewContext(context.Background())\n\tdefer cancel()\n\n\t// run task list\n\tvar res string\n\terr := chromedp.Run(ctx,\n\t\tchromedp.Navigate(`https://pkg.go.dev/time`),\n\t\tchromedp.Text(`.Documentation-overview`, &res, chromedp.NodeVisible),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tlog.Println(strings.TrimSpace(res))\n}\n```\n\ncontextを作成して、コマンドを実行する。contextなんだったっけ...？生でWebSocker叩いてた記録を読み返す。\n\nPlaywrightでも同じようにContextを作成していた。意味はわかるんだけど、どのレイヤーで定義されているやつなのかがわからない。これ多分Seleniumの時に見たんだよな。\n\nhttps://developer.mozilla.org/ja/docs/Glossary/Browsing_context\n\n> 閲覧コンテキストは、ブラウザー が Document (今日では通常タブであり、場合によってはウィンドウまたはページ内のフレーム) を表示する環境です。\n\nまあタブと思っておけばよさそう。\n\n","bodyHTML":"<p>cdprotoがCDPのSDK</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Fchromedp%2Fcdproto\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/chromedp/cdproto\" style=\"display: none\" rel=\"nofollow\">https://github.com/chromedp/cdproto</a></p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Message chrome DevTools Protocol message sent/read over websocket</span>\n<span class=\"token comment\">// connection.</span>\n<span class=\"token keyword\">type</span> Message <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tID        <span class=\"token builtin\">int64</span>               <span class=\"token string\">`json:\"id,omitempty\"`</span>        <span class=\"token comment\">// Unique message identifier.</span>\n\tSessionID target<span class=\"token punctuation\">.</span>SessionID    <span class=\"token string\">`json:\"sessionId,omitempty\"`</span> <span class=\"token comment\">// Session that the message belongs to when using flat access.</span>\n\tMethod    MethodType          <span class=\"token string\">`json:\"method,omitempty\"`</span>    <span class=\"token comment\">// Event or command type.</span>\n\tParams    easyjson<span class=\"token punctuation\">.</span>RawMessage <span class=\"token string\">`json:\"params,omitempty\"`</span>    <span class=\"token comment\">// Event or command parameters.</span>\n\tResult    easyjson<span class=\"token punctuation\">.</span>RawMessage <span class=\"token string\">`json:\"result,omitempty\"`</span>    <span class=\"token comment\">// Command return values.</span>\n\tError     <span class=\"token operator\">*</span>Error              <span class=\"token string\">`json:\"error,omitempty\"`</span>     <span class=\"token comment\">// Error message.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>こういうMessageの構造体を持っていて、このMessageをJSONにシリアライズ（これはGoでいうところのMarshalなのかな）してWebSocketで送信する。</p>\n<hr>\n<p>chromedp</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Fchromedp%2Fchromedp\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/chromedp/chromedp\" style=\"display: none\" rel=\"nofollow\">https://github.com/chromedp/chromedp</a></p>\n<p>chromedpが本体で、CDPのラッパーに相当する。内部的にはcdprotoを利用している。seleniumがWebDriverをラップしているようなイメージ。</p>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">ghq get git@github.com:chromedp/examples.git\ngo run text/main.go\n</code></pre></div><p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fpkg.go.dev%2Ftime\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://pkg.go.dev/time\" style=\"display: none\" rel=\"nofollow\">https://pkg.go.dev/time</a></p>\n<p>これが表示されるようになっている。</p>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">go run click/main.go\n</code></pre></div><p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fpkg.go.dev%2Ftime%23After\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://pkg.go.dev/time#After\" style=\"display: none\" rel=\"nofollow\">https://pkg.go.dev/time#After</a></p>\n<p>ここのExampleをクリックするサンプルケース。</p>\n<p>構造を見てみよう。例えば前者の方はこうなっている</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// create context</span>\n\tctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> chromedp<span class=\"token punctuation\">.</span><span class=\"token function\">NewContext</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// run task list</span>\n\t<span class=\"token keyword\">var</span> res <span class=\"token builtin\">string</span>\n\terr <span class=\"token operator\">:=</span> chromedp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span>\n\t\tchromedp<span class=\"token punctuation\">.</span><span class=\"token function\">Navigate</span><span class=\"token punctuation\">(</span><span class=\"token string\">`https://pkg.go.dev/time`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tchromedp<span class=\"token punctuation\">.</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">`.Documentation-overview`</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>res<span class=\"token punctuation\">,</span> chromedp<span class=\"token punctuation\">.</span>NodeVisible<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">TrimSpace</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>contextを作成して、コマンドを実行する。contextなんだったっけ...？生でWebSocker叩いてた記録を読み返す。</p>\n<p>Playwrightでも同じようにContextを作成していた。意味はわかるんだけど、どのレイヤーで定義されているやつなのかがわからない。これ多分Seleniumの時に見たんだよな。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FGlossary%2FBrowsing_context\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://developer.mozilla.org/ja/docs/Glossary/Browsing_context\" style=\"display: none\" rel=\"nofollow\">https://developer.mozilla.org/ja/docs/Glossary/Browsing_context</a></p>\n<blockquote>\n<p>閲覧コンテキストは、ブラウザー が Document (今日では通常タブであり、場合によってはウィンドウまたはページ内のフレーム) を表示する環境です。</p>\n</blockquote>\n<p>まあタブと思っておけばよさそう。</p>\n","author_association":"OWNER","created_at":"2022-08-28T06:57:02Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/74#issuecomment-1229394090","id":1229394090,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/74","node_id":"IC_kwDOHWTPVs5JRxCq","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1229394090/reactions"},"updated_at":"2022-08-28T06:57:02Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1229394090","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}}]},"__N_SSG":true}