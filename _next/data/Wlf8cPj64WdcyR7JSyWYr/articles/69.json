{"pageProps":{"issue":{"body":"","bodyHTML":"","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69/comments","created_at":"2022-08-20T23:15:51Z","events_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69/events","html_url":"https://github.com/IkumaTadokoro/diary/issues/69","id":1345328710,"labels":[],"labels_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHWTPVs5QMBZG","number":69,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69/reactions"},"repository_url":"https://api.github.com/repos/IkumaTadokoro/diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69/timeline","title":"2022-08-21","updated_at":"2022-08-20T23:15:51Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},"issueComments":[{"body":"pdlgenの挙動をみていく。\n\nまずは動かしてみて、どういうふうに動くかを確認する。\n\nREADMEをちゃんと読んでおこう。いそがば回れだ。\n\n- cdproto-genはChrome DevTools Protocolのコマンド、イベント、型のためのGoコードを生成する。\n- cdproto-genはChromiumソースツリーから`browser_protocol.pdl`と`js_protocol.pdl`を取得する。これらは`$GOPATH/pkg/cdproto-gen`にキャッシュされ、定期的に更新される。\n- HAR定義は特別なHARドメインを生成するために使用される。\n  - HAR定義ってなんだ？\n　- http://www.softwareishard.com/blog/har-12-spec/ のことみたい\n  - HTTP ARchive 1.2のことだそう。\n  - Webブラウザーとサイトとのやりとりに関する詳細なパフォーマンスデータをエクスポートするためのHTTPトランザクションのアーカイブ形式を定義する仕様\n- cdproto-gen は browser_protocol.pdl と js_protocol.pdl で定義された CDP ドメインをテンプレートから構成して動作するように調整する。\n  - 生成物はchromedp/cdprotoとchromedp/cdproto/<domain>サブパッケージ。循環依存性を持つCDPタイプは`chromedp/cdproto/cdp`パッケージに配置される。\n\n全体構成がほんのりわかったくらい。動かしてみよう\n\n```bash\ngo get -u github.com/chromedp/cdproto-gen\n```\n\nいまって`go get`使うんだっけ?あ〜少なくとも1.17の時点で非推奨になっているので、1.19を使っている自分としては`go install`を使うべき。\n\nhttps://future-architect.github.io/articles/20210818a/\n\nhttps://re-engines.com/2021/10/11/go-1-16%E3%81%A7%E3%81%AEgo-get%E3%81%A8go-install%E3%81%AE%E5%A4%89%E6%9B%B4%E7%82%B9/\n\n`go get`は`go.mod`を編集するためのコマンド、`go install`はバイナリのビルド、インストールのためのコマンドになったと。\n\n\n`-u`オプションはなんだ？\n\nhttps://qiita.com/tadaken/items/9f8fd9c8e7096b6bffde\n\n> 新しいマイナーリリースまたはパッチリリースが利用可能な場合に、パッケージとその依存パッケージをネットワークから更新する。\n\nなるほど、最新版を取ってくる感じにすればいいのか。Goの公式サイト行って、go installを確認するか。\n\nGoのドキュメント、検索機能ついてないの辛すぎないですか？\n\nhttps://go.dev/doc/cmd\n\nこれがコマンドのドキュメントっぽい。`go install <package>@<version>`\n\n割と最近まで更新されているのに、何で`go get`がREADMEに残っているんだろう。全然Issueにも上がっていない。つまり、これはgo getでやれってことなのかな？\n\nとりあえずやってみよう。\n\n```bash\ngo get -u github.com/chromedp/cdproto-gen\n```\n\n```bash\ngo: go.mod file not found in current directory or any parent directory.\n\t'go get' is no longer supported outside a module.\n\tTo build and install a command, use 'go install' with a version,\n\tlike 'go install example.com/cmd@latest'\n\tFor more information, see https://golang.org/doc/go-get-install-deprecation\n\tor run 'go help get' or 'go help install'.\n```\n\nダメじゃん。というかヘルプコマンドナいと思ったら、helpの引数にコマンドを渡す形式だったんか。go installしてみる。\n\n\n```bash\n$ go install github.com/chromedp/cdproto-gen\n\ngo install github.com/chromedp/cdproto-gen\ngo: 'go install' requires a version when current directory is not in a module\n\tTry 'go install github.com/chromedp/cdproto-gen@latest' to install the latest version\n\n$ go install github.com/chromedp/cdproto-gen@latest\n\ngo: downloading github.com/chromedp/cdproto-gen v0.0.0-20200709115207-99c9ca13bbae\ngo: downloading github.com/mailru/easyjson v0.7.2-0.20200524104011-8ba3c7bdceed\ngo: downloading github.com/ryanuber/go-glob v1.0.0\ngo: downloading golang.org/x/sync v0.0.0-20200317015054-43a5402ce75a\ngo: downloading golang.org/x/tools v0.0.0-20200606014950-c42cb6316fb6\ngo: downloading github.com/valyala/quicktemplate v1.5.0\ngo: downloading github.com/client9/misspell v0.3.4\ngo: downloading github.com/knq/snaker v0.0.0-20181215144011-2bc8a4db4687\ngo: downloading github.com/Masterminds/semver v1.5.0\ngo: downloading github.com/PuerkitoBio/goquery v1.5.1\ngo: downloading golang.org/x/net v0.0.0-20200602114024-627f9648deb9\ngo: downloading github.com/andybalholm/cascadia v1.2.0\ngo: downloading github.com/valyala/bytebufferpool v1.0.0\ngo: downloading golang.org/x/mod v0.2.0\ngo: downloading golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543\n```\n\nこれでダウンロード完了した。みたい。次にREADMEのUsingのセクション。\n\n`cdproto-gen`で動くそうな。これも動かしてみるか。\n\n```bash\n$ cdproto-gen\nzsh: command not found: cdproto-gen\n```\n\nまあPATHが通ってないんでしょうね。一旦Goのファイルがどこに落ちているのか調べる。\n\nhttps://pkg.go.dev/cmd/go#hdr-Compile_and_install_packages_and_dependencies\n\n> Executables are installed in the directory named by the GOBIN environment variable, which defaults to $GOPATH/bin or $HOME/go/bin if the GOPATH environment variable is not set. Executables in $GOROOT are installed in $GOROOT/bin or $GOTOOLDIR instead of $GOBIN.\n\n```bash\n$ echo $GOROOT $GOBIN $GOPATH\n\n\n$ ls ~/go/bin\ncdproto-gen\n```\n\nなるほど、ここにあるけどPATHが通ってないので、ということなのか。これGOPATHとか設定した方がいいのかな？もう少し公式ドキュメントを読み進める。\n\n`go install`自体のドキュメントにはなさそうなので、環境年数のドキュメントに飛びたい。\n\nhttps://pkg.go.dev/cmd/go#hdr-GOPATH_environment_variable\n\nhttps://pkg.go.dev/cmd/go#hdr-GOPATH_and_Modules\n\nhttps://pkg.go.dev/cmd/go#hdr-Legacy_GOPATH_go_get\n\nOverviewをみる限りだとここら辺かな？\n\n```bash\n$ go env GOPATH\n~/go\n```\n\nインストール先と挙動はあっていそうなので単純にGOPATHへのPATHを通せば良さそう。\n\n```bash\n# .zshrc\nexport GOPATH=$HOME/go\nexport GOBIN=$GOPATH/bin\nexport PATH=$PATH:$GOBIN\n```\n\n```bash\ncdproto-gen --help\nUsage of cdproto-gen:\n  -cache string\n    \tprotocol cache directory\n  -chromium string\n    \tchromium protocol version\n  -debug\n    \ttoggle debug (writes generated files to disk without post-processing)\n  -go-pkg string\n    \tgo base package name (default \"github.com/chromedp/cdproto\")\n  -go-wl string\n    \tcomma-separated list of files to whitelist (ignore) (default \"LICENSE,README.md,*.pdl,go.mod,go.sum,easyjson.go\")\n  -latest\n    \tuse latest protocol\n  -no-clean\n    \ttoggle not cleaning (removing) existing directories\n  -no-dump\n    \ttoggle not dumping generated protocol file to out directory\n  -out string\n    \tpackage out directory\n  -pdl string\n    \tpath to pdl file to use\n  -ttl duration\n    \tfile retrieval caching ttl (default 24h0m0s)\n  -v8 string\n    \tv8 protocol version\n```\n\n認識されたようだ。一旦休憩\n","bodyHTML":"<p>pdlgenの挙動をみていく。</p>\n<p>まずは動かしてみて、どういうふうに動くかを確認する。</p>\n<p>READMEをちゃんと読んでおこう。いそがば回れだ。</p>\n<ul>\n<li>cdproto-genはChrome DevTools Protocolのコマンド、イベント、型のためのGoコードを生成する。</li>\n<li>cdproto-genはChromiumソースツリーから<code>browser_protocol.pdl</code>と<code>js_protocol.pdl</code>を取得する。これらは<code>$GOPATH/pkg/cdproto-gen</code>にキャッシュされ、定期的に更新される。</li>\n<li>HAR定義は特別なHARドメインを生成するために使用される。\n<ul>\n<li>HAR定義ってなんだ？<br>\n　- <a href=\"http://www.softwareishard.com/blog/har-12-spec/\" rel=\"nofollow\">http://www.softwareishard.com/blog/har-12-spec/</a> のことみたい</li>\n<li>HTTP ARchive 1.2のことだそう。</li>\n<li>Webブラウザーとサイトとのやりとりに関する詳細なパフォーマンスデータをエクスポートするためのHTTPトランザクションのアーカイブ形式を定義する仕様</li>\n</ul>\n</li>\n<li>cdproto-gen は browser_protocol.pdl と js_protocol.pdl で定義された CDP ドメインをテンプレートから構成して動作するように調整する。\n<ul>\n<li>生成物はchromedp/cdprotoとchromedp/cdproto/&lt;domain&gt;サブパッケージ。循環依存性を持つCDPタイプは<code>chromedp/cdproto/cdp</code>パッケージに配置される。</li>\n</ul>\n</li>\n</ul>\n<p>全体構成がほんのりわかったくらい。動かしてみよう</p>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">go get -u github.com/chromedp/cdproto-gen\n</code></pre></div><p>いまって<code>go get</code>使うんだっけ?あ〜少なくとも1.17の時点で非推奨になっているので、1.19を使っている自分としては<code>go install</code>を使うべき。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Ffuture-architect.github.io%2Farticles%2F20210818a%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://future-architect.github.io/articles/20210818a/\" style=\"display: none\" rel=\"nofollow\">https://future-architect.github.io/articles/20210818a/</a></p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fre-engines.com%2F2021%2F10%2F11%2Fgo-1-16%25E3%2581%25A7%25E3%2581%25AEgo-get%25E3%2581%25A8go-install%25E3%2581%25AE%25E5%25A4%2589%25E6%259B%25B4%25E7%2582%25B9%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://re-engines.com/2021/10/11/go-1-16%E3%81%A7%E3%81%AEgo-get%E3%81%A8go-install%E3%81%AE%E5%A4%89%E6%9B%B4%E7%82%B9/\" style=\"display: none\" rel=\"nofollow\">https://re-engines.com/2021/10/11/go-1-16でのgo-getとgo-installの変更点/</a></p>\n<p><code>go get</code>は<code>go.mod</code>を編集するためのコマンド、<code>go install</code>はバイナリのビルド、インストールのためのコマンドになったと。</p>\n<p><code>-u</code>オプションはなんだ？</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fqiita.com%2Ftadaken%2Fitems%2F9f8fd9c8e7096b6bffde\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://qiita.com/tadaken/items/9f8fd9c8e7096b6bffde\" style=\"display: none\" rel=\"nofollow\">https://qiita.com/tadaken/items/9f8fd9c8e7096b6bffde</a></p>\n<blockquote>\n<p>新しいマイナーリリースまたはパッチリリースが利用可能な場合に、パッケージとその依存パッケージをネットワークから更新する。</p>\n</blockquote>\n<p>なるほど、最新版を取ってくる感じにすればいいのか。Goの公式サイト行って、go installを確認するか。</p>\n<p>Goのドキュメント、検索機能ついてないの辛すぎないですか？</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgo.dev%2Fdoc%2Fcmd\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://go.dev/doc/cmd\" style=\"display: none\" rel=\"nofollow\">https://go.dev/doc/cmd</a></p>\n<p>これがコマンドのドキュメントっぽい。<code>go install &lt;package&gt;@&lt;version&gt;</code></p>\n<p>割と最近まで更新されているのに、何で<code>go get</code>がREADMEに残っているんだろう。全然Issueにも上がっていない。つまり、これはgo getでやれってことなのかな？</p>\n<p>とりあえずやってみよう。</p>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">go get -u github.com/chromedp/cdproto-gen\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">go: go.mod <span class=\"token function\">file</span> not found <span class=\"token keyword\">in</span> current directory or any parent directory.\n\t<span class=\"token string\">'go get'</span> is no longer supported outside a module.\n\tTo build and <span class=\"token function\">install</span> a command, use <span class=\"token string\">'go install'</span> with a version,\n\tlike <span class=\"token string\">'go install example.com/cmd@latest'</span>\n\tFor <span class=\"token function\">more</span> information, see https://golang.org/doc/go-get-install-deprecation\n\tor run <span class=\"token string\">'go help get'</span> or <span class=\"token string\">'go help install'</span><span class=\"token builtin class-name\">.</span>\n</code></pre></div><p>ダメじゃん。というかヘルプコマンドナいと思ったら、helpの引数にコマンドを渡す形式だったんか。go installしてみる。</p>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">$ go <span class=\"token function\">install</span> github.com/chromedp/cdproto-gen\n\ngo <span class=\"token function\">install</span> github.com/chromedp/cdproto-gen\ngo: <span class=\"token string\">'go install'</span> requires a version when current directory is not <span class=\"token keyword\">in</span> a module\n\tTry <span class=\"token string\">'go install github.com/chromedp/cdproto-gen@latest'</span> to <span class=\"token function\">install</span> the latest version\n\n$ go <span class=\"token function\">install</span> github.com/chromedp/cdproto-gen@latest\n\ngo: downloading github.com/chromedp/cdproto-gen v0.0.0-20200709115207-99c9ca13bbae\ngo: downloading github.com/mailru/easyjson v0.7.2-0.20200524104011-8ba3c7bdceed\ngo: downloading github.com/ryanuber/go-glob v1.0.0\ngo: downloading golang.org/x/sync v0.0.0-20200317015054-43a5402ce75a\ngo: downloading golang.org/x/tools v0.0.0-20200606014950-c42cb6316fb6\ngo: downloading github.com/valyala/quicktemplate v1.5.0\ngo: downloading github.com/client9/misspell v0.3.4\ngo: downloading github.com/knq/snaker v0.0.0-20181215144011-2bc8a4db4687\ngo: downloading github.com/Masterminds/semver v1.5.0\ngo: downloading github.com/PuerkitoBio/goquery v1.5.1\ngo: downloading golang.org/x/net v0.0.0-20200602114024-627f9648deb9\ngo: downloading github.com/andybalholm/cascadia v1.2.0\ngo: downloading github.com/valyala/bytebufferpool v1.0.0\ngo: downloading golang.org/x/mod v0.2.0\ngo: downloading golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543\n</code></pre></div><p>これでダウンロード完了した。みたい。次にREADMEのUsingのセクション。</p>\n<p><code>cdproto-gen</code>で動くそうな。これも動かしてみるか。</p>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">$ cdproto-gen\nzsh: <span class=\"token builtin class-name\">command</span> not found: cdproto-gen\n</code></pre></div><p>まあPATHが通ってないんでしょうね。一旦Goのファイルがどこに落ちているのか調べる。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fpkg.go.dev%2Fcmd%2Fgo%23hdr-Compile_and_install_packages_and_dependencies\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://pkg.go.dev/cmd/go#hdr-Compile_and_install_packages_and_dependencies\" style=\"display: none\" rel=\"nofollow\">https://pkg.go.dev/cmd/go#hdr-Compile_and_install_packages_and_dependencies</a></p>\n<blockquote>\n<p>Executables are installed in the directory named by the GOBIN environment variable, which defaults to $GOPATH/bin or $HOME/go/bin if the GOPATH environment variable is not set. Executables in $GOROOT are installed in $GOROOT/bin or $GOTOOLDIR instead of $GOBIN.</p>\n</blockquote>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$GOROOT</span> <span class=\"token variable\">$GOBIN</span> <span class=\"token variable\">$GOPATH</span>\n\n\n$ <span class=\"token function\">ls</span> ~/go/bin\ncdproto-gen\n</code></pre></div><p>なるほど、ここにあるけどPATHが通ってないので、ということなのか。これGOPATHとか設定した方がいいのかな？もう少し公式ドキュメントを読み進める。</p>\n<p><code>go install</code>自体のドキュメントにはなさそうなので、環境年数のドキュメントに飛びたい。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fpkg.go.dev%2Fcmd%2Fgo%23hdr-GOPATH_environment_variable\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://pkg.go.dev/cmd/go#hdr-GOPATH_environment_variable\" style=\"display: none\" rel=\"nofollow\">https://pkg.go.dev/cmd/go#hdr-GOPATH_environment_variable</a></p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fpkg.go.dev%2Fcmd%2Fgo%23hdr-GOPATH_and_Modules\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://pkg.go.dev/cmd/go#hdr-GOPATH_and_Modules\" style=\"display: none\" rel=\"nofollow\">https://pkg.go.dev/cmd/go#hdr-GOPATH_and_Modules</a></p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fpkg.go.dev%2Fcmd%2Fgo%23hdr-Legacy_GOPATH_go_get\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://pkg.go.dev/cmd/go#hdr-Legacy_GOPATH_go_get\" style=\"display: none\" rel=\"nofollow\">https://pkg.go.dev/cmd/go#hdr-Legacy_GOPATH_go_get</a></p>\n<p>Overviewをみる限りだとここら辺かな？</p>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">$ go <span class=\"token function\">env</span> GOPATH\n~/go\n</code></pre></div><p>インストール先と挙動はあっていそうなので単純にGOPATHへのPATHを通せば良さそう。</p>\n<div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># .zshrc</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">GOPATH</span><span class=\"token operator\">=</span><span class=\"token environment constant\">$HOME</span>/go\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">GOBIN</span><span class=\"token operator\">=</span><span class=\"token variable\">$GOPATH</span>/bin\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$GOBIN</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">cdproto-gen --help\nUsage of cdproto-gen:\n  -cache string\n    \tprotocol cache directory\n  -chromium string\n    \tchromium protocol version\n  -debug\n    \ttoggle debug <span class=\"token punctuation\">(</span>writes generated files to disk without post-processing<span class=\"token punctuation\">)</span>\n  -go-pkg string\n    \tgo base package name <span class=\"token punctuation\">(</span>default <span class=\"token string\">\"github.com/chromedp/cdproto\"</span><span class=\"token punctuation\">)</span>\n  -go-wl string\n    \tcomma-separated list of files to whitelist <span class=\"token punctuation\">(</span>ignore<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>default <span class=\"token string\">\"LICENSE,README.md,*.pdl,go.mod,go.sum,easyjson.go\"</span><span class=\"token punctuation\">)</span>\n  -latest\n    \tuse latest protocol\n  -no-clean\n    \ttoggle not cleaning <span class=\"token punctuation\">(</span>removing<span class=\"token punctuation\">)</span> existing directories\n  -no-dump\n    \ttoggle not dumping generated protocol <span class=\"token function\">file</span> to out directory\n  -out string\n    \tpackage out directory\n  -pdl string\n    \tpath to pdl <span class=\"token function\">file</span> to use\n  -ttl duration\n    \t<span class=\"token function\">file</span> retrieval caching ttl <span class=\"token punctuation\">(</span>default 24h0m0s<span class=\"token punctuation\">)</span>\n  -v8 string\n    \tv8 protocol version\n</code></pre></div><p>認識されたようだ。一旦休憩</p>\n","author_association":"OWNER","created_at":"2022-08-21T06:39:27Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/69#issuecomment-1221479502","id":1221479502,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/69","node_id":"IC_kwDOHWTPVs5IzkxO","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221479502/reactions"},"updated_at":"2022-08-21T06:39:27Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1221479502","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}}]},"__N_SSG":true}