{"pageProps":{"issue":{"body":"","bodyHTML":"","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/43/comments","created_at":"2022-06-26T04:23:42Z","events_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/43/events","html_url":"https://github.com/IkumaTadokoro/diary/issues/43","id":1284797942,"labels":[],"labels_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/43/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHWTPVs5MlHX2","number":43,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/43/reactions"},"repository_url":"https://api.github.com/repos/IkumaTadokoro/diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/43/timeline","title":"2022-06-26","updated_at":"2022-06-26T04:23:42Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/43","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},"issueComments":[{"body":"# VueにおけるTypeScriptの定義\n\nいまいち適当にやっている部分があるんで、ドキュメントに載っている部分から中心に学習する。\n\n環境は前回の反省を踏まえてStackBlitzでやる\n\nhttps://stackblitz.com/edit/vitejs-vite-kzftqc?file=index.html&terminal=dev\n\nドキュメントはまずはここかな？\n\nhttps://vuejs.org/guide/typescript/overview.html\n\n## 概要\n\n> With a Vite-based setup, the dev server and the bundler are transpilation-only and do not perform any type-checking. This ensures the Vite dev server stays blazing fast even when using TypeScript.\n\n今Viteで環境作っているけど、Viteの場合はトランスパイルしかしないから速いって。だからその分、型エラーはIDEでやってくれってさ。\nVSCodeでやってもInteliJ系でやってもサポートは受けられるみたい。\n\n\n> If using SFCs, use the vue-tsc utility for command line type checking and type declaration generation. vue-tsc is a wrapper around tsc, TypeScript's own command line interface. It works largely the same as tsc except that it supports Vue SFCs in addition to TypeScript files. You can run vue-tsc in watch mode in parallel to the Vite dev server.\n\nvue-tscってのがあって、これがtscのラッパーなんだと。SFCに対してはこれで型チェックができるそう。\n\n> Takeover Mode\n> This section only applies for VSCode + Volar.\n\nそんなのがあるんだ。VSCode強しだ。まあスキップします。\n\n## 基本的な使い方\n\nhttps://vuejs.org/guide/typescript/overview.html#general-usage-notes\n\nここから本題って感じだ。\n\n### defineComponent()\n\nTypeScriptに対して、コンポーネント内のオプションに対して適切に型を参照させるために使用する。\n\nサンプルみる感じだと、`script setup`を使用する時には`defineComponent`は必要ない。\n\n型チェックは`template`内に対しても実行されるみたい。\n\n---\n\n...StackBlitzでやっちゃうとIDEでやっている型チェックが走らないので意味ないじゃん\n結局ローカルで環境を作り直す。\n\n\n","bodyHTML":"<h1 id=\"vue%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Btypescript%E3%81%AE%E5%AE%9A%E7%BE%A9\"><a class=\"header-anchor-link\" href=\"#vue%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Btypescript%E3%81%AE%E5%AE%9A%E7%BE%A9\" aria-hidden=\"true\" rel=\"nofollow\"></a> VueにおけるTypeScriptの定義</h1>\n<p>いまいち適当にやっている部分があるんで、ドキュメントに載っている部分から中心に学習する。</p>\n<p>環境は前回の反省を踏まえてStackBlitzでやる</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fstackblitz.com%2Fedit%2Fvitejs-vite-kzftqc%3Ffile%3Dindex.html%26terminal%3Ddev\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://stackblitz.com/edit/vitejs-vite-kzftqc?file=index.html&amp;terminal=dev\" style=\"display: none\" rel=\"nofollow\">https://stackblitz.com/edit/vitejs-vite-kzftqc?file=index.html&amp;terminal=dev</a></p>\n<p>ドキュメントはまずはここかな？</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fvuejs.org%2Fguide%2Ftypescript%2Foverview.html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://vuejs.org/guide/typescript/overview.html\" style=\"display: none\" rel=\"nofollow\">https://vuejs.org/guide/typescript/overview.html</a></p>\n<h2 id=\"%E6%A6%82%E8%A6%81\"><a class=\"header-anchor-link\" href=\"#%E6%A6%82%E8%A6%81\" aria-hidden=\"true\" rel=\"nofollow\"></a> 概要</h2>\n<blockquote>\n<p>With a Vite-based setup, the dev server and the bundler are transpilation-only and do not perform any type-checking. This ensures the Vite dev server stays blazing fast even when using TypeScript.</p>\n</blockquote>\n<p>今Viteで環境作っているけど、Viteの場合はトランスパイルしかしないから速いって。だからその分、型エラーはIDEでやってくれってさ。<br>\nVSCodeでやってもInteliJ系でやってもサポートは受けられるみたい。</p>\n<blockquote>\n<p>If using SFCs, use the vue-tsc utility for command line type checking and type declaration generation. vue-tsc is a wrapper around tsc, TypeScript's own command line interface. It works largely the same as tsc except that it supports Vue SFCs in addition to TypeScript files. You can run vue-tsc in watch mode in parallel to the Vite dev server.</p>\n</blockquote>\n<p>vue-tscってのがあって、これがtscのラッパーなんだと。SFCに対してはこれで型チェックができるそう。</p>\n<blockquote>\n<p>Takeover Mode<br>\nThis section only applies for VSCode + Volar.</p>\n</blockquote>\n<p>そんなのがあるんだ。VSCode強しだ。まあスキップします。</p>\n<h2 id=\"%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E3%81%84%E6%96%B9\"><a class=\"header-anchor-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E3%81%84%E6%96%B9\" aria-hidden=\"true\" rel=\"nofollow\"></a> 基本的な使い方</h2>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fvuejs.org%2Fguide%2Ftypescript%2Foverview.html%23general-usage-notes\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://vuejs.org/guide/typescript/overview.html#general-usage-notes\" style=\"display: none\" rel=\"nofollow\">https://vuejs.org/guide/typescript/overview.html#general-usage-notes</a></p>\n<p>ここから本題って感じだ。</p>\n<h3 id=\"definecomponent()\"><a class=\"header-anchor-link\" href=\"#definecomponent()\" aria-hidden=\"true\" rel=\"nofollow\"></a> defineComponent()</h3>\n<p>TypeScriptに対して、コンポーネント内のオプションに対して適切に型を参照させるために使用する。</p>\n<p>サンプルみる感じだと、<code>script setup</code>を使用する時には<code>defineComponent</code>は必要ない。</p>\n<p>型チェックは<code>template</code>内に対しても実行されるみたい。</p>\n<hr>\n<p>...StackBlitzでやっちゃうとIDEでやっている型チェックが走らないので意味ないじゃん<br>\n結局ローカルで環境を作り直す。</p>\n","author_association":"OWNER","created_at":"2022-06-26T04:59:51Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/43#issuecomment-1166418192","id":1166418192,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/43","node_id":"IC_kwDOHWTPVs5FhiEQ","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1166418192/reactions"},"updated_at":"2022-06-26T04:59:51Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1166418192","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}},{"body":"## Composition APIにおける型定義\n\nhttps://vuejs.org/guide/typescript/composition-api.html\n\n### props\n\n`script setup`を使用するのが基本系。\n\n`defineProps`マクロを使用したpropsの定義は\n\n1. runtime declaration\n2. type-based declaration\n\nの2種類ある。\n\nどちらを使っても良いが、使用するのはどちらか一方のみ。\n\n一方で単純に型定義としてpropsを定義することもできる。これが一番楽なんでは。\n\n`defineProps`マクロをGenericありで使用する場合（type-based declaration?）、以下の制約がある。\n\n- objectリテラルか、**同じファイルの**objectリテラルもしくはinterfaceへの参照\n\nこれはVueのコンポーネントはそれぞれ別々にコンパイルされるから。そのうち撤廃されるそう。\n\n`script setup`を使用しない場合hは、`defineComponent`を使用する必要がある。propsの型はsetup内のpropsオプションで定義される。\n\n### emit\n\nemitも`script setup`を使用していれば、`defineEmits`マクロを使用できる。\n\n```vue\n<script setup lang=\"ts\">\n// runtime\nconst emit = defineEmits(['change', 'update'])\n\n// type-based\nconst emit = defineEmits<{\n  (e: 'change', id: number): void\n  (e: 'update', value: string): void\n}>()\n</script>\n```\n\n### ref()\n\n- 初期値から型を推論する\n- `Ref`型を使用して、もしくは`ref`に型引数をつけることで、複雑な型を表現することができる。\n\n```vue\nimport { ref } from 'vue'\nimport type { Ref } from 'vue'\n\nconst year: Ref<string | number> = ref('2020')\n\nyear.value = 2020 // ok!\n```\n\n```vue\n// resulting type: Ref<string | number>\nconst year = ref<string | number>('2020')\n\nyear.value = 2020 // ok!\n```\n\n初期値が未設定で型引数をつけた場合、`Ref<generic | undefined>`になる\n\n### computed()\n\ngetterの戻り値から型を推論する\n\n```vue\nimport { ref, computed } from 'vue'\n\nconst count = ref(0)\n\n// inferred type: ComputedRef<number>\nconst double = computed(() => count.value * 2)\n```\n\n特定の型を型引数に指定することもできる\n\n```vue\nconst double = computed<number>(() => {\n  return count.value * 2\n})\n```\n\n### イベントハンドラ\n\nネイティブのDOMイベントを扱っている場合、ハンドラに渡す引数がを正しく定義した方がいいケースがある。\n\nevent引数は基本的に暗黙のanyを持っているので`Event`を、内部的な値は適切な型アサーションを定義するのが良い。\n\n\n### テンプレート参照\n\nテンプレート参照は明示的に型引数と初期値nullで定義するべき。\n\n```vue\nconst el = ref<HTMLInputElement | null>(null)\n```\n\nコンポーネントがマウントされるまでは初期値はnullで、v-ifによって参照されている要素がアンマウントされた場合にも、nullに設定される可能性がある。\n\nそのため、上記elの要素el.valueにアクセスするためには、オプショナルチェーンや型ガードが必要。\n\n\n\n","bodyHTML":"<h2 id=\"composition-api%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E5%9E%8B%E5%AE%9A%E7%BE%A9\"><a class=\"header-anchor-link\" href=\"#composition-api%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E5%9E%8B%E5%AE%9A%E7%BE%A9\" aria-hidden=\"true\" rel=\"nofollow\"></a> Composition APIにおける型定義</h2>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fvuejs.org%2Fguide%2Ftypescript%2Fcomposition-api.html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://vuejs.org/guide/typescript/composition-api.html\" style=\"display: none\" rel=\"nofollow\">https://vuejs.org/guide/typescript/composition-api.html</a></p>\n<h3 id=\"props\"><a class=\"header-anchor-link\" href=\"#props\" aria-hidden=\"true\" rel=\"nofollow\"></a> props</h3>\n<p><code>script setup</code>を使用するのが基本系。</p>\n<p><code>defineProps</code>マクロを使用したpropsの定義は</p>\n<ol>\n<li>runtime declaration</li>\n<li>type-based declaration</li>\n</ol>\n<p>の2種類ある。</p>\n<p>どちらを使っても良いが、使用するのはどちらか一方のみ。</p>\n<p>一方で単純に型定義としてpropsを定義することもできる。これが一番楽なんでは。</p>\n<p><code>defineProps</code>マクロをGenericありで使用する場合（type-based declaration?）、以下の制約がある。</p>\n<ul>\n<li>objectリテラルか、<strong>同じファイルの</strong>objectリテラルもしくはinterfaceへの参照</li>\n</ul>\n<p>これはVueのコンポーネントはそれぞれ別々にコンパイルされるから。そのうち撤廃されるそう。</p>\n<p><code>script setup</code>を使用しない場合hは、<code>defineComponent</code>を使用する必要がある。propsの型はsetup内のpropsオプションで定義される。</p>\n<h3 id=\"emit\"><a class=\"header-anchor-link\" href=\"#emit\" aria-hidden=\"true\" rel=\"nofollow\"></a> emit</h3>\n<p>emitも<code>script setup</code>を使用していれば、<code>defineEmits</code>マクロを使用できる。</p>\n<div class=\"code-block-container\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ts<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token comment\">// runtime</span>\n<span class=\"token keyword\">const</span> emit <span class=\"token operator\">=</span> <span class=\"token function\">defineEmits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'update'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// type-based</span>\n<span class=\"token keyword\">const</span> emit <span class=\"token operator\">=</span> defineEmits<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n  <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token string\">'update'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre></div><h3 id=\"ref()\"><a class=\"header-anchor-link\" href=\"#ref()\" aria-hidden=\"true\" rel=\"nofollow\"></a> ref()</h3>\n<ul>\n<li>初期値から型を推論する</li>\n<li><code>Ref</code>型を使用して、もしくは<code>ref</code>に型引数をつけることで、複雑な型を表現することができる。</li>\n</ul>\n<div class=\"code-block-container\"><pre class=\"language-html\"><code class=\"language-html\">import { ref } from 'vue'\nimport type { Ref } from 'vue'\n\nconst year: Ref<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">|</span> <span class=\"token attr-name\">number</span><span class=\"token punctuation\">></span></span> = ref('2020')\n\nyear.value = 2020 // ok!\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-html\"><code class=\"language-html\">// resulting type: Ref<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">|</span> <span class=\"token attr-name\">number</span><span class=\"token punctuation\">></span></span>\nconst year = ref<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">|</span> <span class=\"token attr-name\">number</span><span class=\"token punctuation\">></span></span>('2020')\n\nyear.value = 2020 // ok!\n</code></pre></div><p>初期値が未設定で型引数をつけた場合、<code>Ref&lt;generic | undefined&gt;</code>になる</p>\n<h3 id=\"computed()\"><a class=\"header-anchor-link\" href=\"#computed()\" aria-hidden=\"true\" rel=\"nofollow\"></a> computed()</h3>\n<p>getterの戻り値から型を推論する</p>\n<div class=\"code-block-container\"><pre class=\"language-html\"><code class=\"language-html\">import { ref, computed } from 'vue'\n\nconst count = ref(0)\n\n// inferred type: ComputedRef<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>number</span><span class=\"token punctuation\">></span></span>\nconst double = computed(() => count.value * 2)\n</code></pre></div><p>特定の型を型引数に指定することもできる</p>\n<div class=\"code-block-container\"><pre class=\"language-html\"><code class=\"language-html\">const double = computed<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>number</span><span class=\"token punctuation\">></span></span>(() => {\n  return count.value * 2\n})\n</code></pre></div><h3 id=\"%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%83%8F%E3%83%B3%E3%83%89%E3%83%A9\"><a class=\"header-anchor-link\" href=\"#%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%83%8F%E3%83%B3%E3%83%89%E3%83%A9\" aria-hidden=\"true\" rel=\"nofollow\"></a> イベントハンドラ</h3>\n<p>ネイティブのDOMイベントを扱っている場合、ハンドラに渡す引数がを正しく定義した方がいいケースがある。</p>\n<p>event引数は基本的に暗黙のanyを持っているので<code>Event</code>を、内部的な値は適切な型アサーションを定義するのが良い。</p>\n<h3 id=\"%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E5%8F%82%E7%85%A7\"><a class=\"header-anchor-link\" href=\"#%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E5%8F%82%E7%85%A7\" aria-hidden=\"true\" rel=\"nofollow\"></a> テンプレート参照</h3>\n<p>テンプレート参照は明示的に型引数と初期値nullで定義するべき。</p>\n<div class=\"code-block-container\"><pre class=\"language-html\"><code class=\"language-html\">const el = ref<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>HTMLInputElement</span> <span class=\"token attr-name\">|</span> <span class=\"token attr-name\">null</span><span class=\"token punctuation\">></span></span>(null)\n</code></pre></div><p>コンポーネントがマウントされるまでは初期値はnullで、v-ifによって参照されている要素がアンマウントされた場合にも、nullに設定される可能性がある。</p>\n<p>そのため、上記elの要素el.valueにアクセスするためには、オプショナルチェーンや型ガードが必要。</p>\n","author_association":"OWNER","created_at":"2022-06-26T05:43:04Z","html_url":"https://github.com/IkumaTadokoro/diary/issues/43#issuecomment-1166422820","id":1166422820,"issue_url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/43","node_id":"IC_kwDOHWTPVs5FhjMk","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1166422820/reactions"},"updated_at":"2022-06-26T05:43:04Z","url":"https://api.github.com/repos/IkumaTadokoro/diary/issues/comments/1166422820","user":{"avatar_url":"https://avatars.githubusercontent.com/u/61409641?v=4","events_url":"https://api.github.com/users/IkumaTadokoro/events{/privacy}","followers_url":"https://api.github.com/users/IkumaTadokoro/followers","following_url":"https://api.github.com/users/IkumaTadokoro/following{/other_user}","gists_url":"https://api.github.com/users/IkumaTadokoro/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/IkumaTadokoro","id":61409641,"login":"IkumaTadokoro","node_id":"MDQ6VXNlcjYxNDA5NjQx","organizations_url":"https://api.github.com/users/IkumaTadokoro/orgs","received_events_url":"https://api.github.com/users/IkumaTadokoro/received_events","repos_url":"https://api.github.com/users/IkumaTadokoro/repos","site_admin":false,"starred_url":"https://api.github.com/users/IkumaTadokoro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IkumaTadokoro/subscriptions","type":"User","url":"https://api.github.com/users/IkumaTadokoro"}}]},"__N_SSG":true}